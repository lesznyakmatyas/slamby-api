<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Activating_0_Service_1" xml:space="preserve">
    <value>Activating {0} service {1}</value>
  </data>
  <data name="DataSet_0_NotFound" xml:space="preserve">
    <value>DataSet '{0}' not found!</value>
  </data>
  <data name="EmptyActivateSettings" xml:space="preserve">
    <value>Empty Activate Settings! You have to use Activate Settings at least for the first Activation!</value>
  </data>
  <data name="ExportFileCanBeDownloadFromHere_0" xml:space="preserve">
    <value>Export file can be download from here: {0}</value>
  </data>
  <data name="ExportingDictionariesFrom_0_Service_1" xml:space="preserve">
    <value>Exporting dictionaries from {0} service {1}</value>
  </data>
  <data name="Indexing_0_Service_1" xml:space="preserve">
    <value>Indexing {0} service {1}</value>
  </data>
  <data name="IndexPartialCanBeCalledAfterCallingIndex" xml:space="preserve">
    <value>IndexPartial can be called after calling Index!</value>
  </data>
  <data name="InvalidIdNotExistingService" xml:space="preserve">
    <value>Invalid Id! Not existing Service!</value>
  </data>
  <data name="InvalidServiceTypeOnly_0_ServicesAreValidForThisRequest" xml:space="preserve">
    <value>Invalid Service type! Only '{0}' Services are valid for this request!</value>
  </data>
  <data name="InvalidStatusOnlyTheServicesWithActiveStatusCanBeDeactivated" xml:space="preserve">
    <value>Invalid Status! Only the Services with 'Active' status can be deactivated!</value>
  </data>
  <data name="InvalidStatusOnlyTheServicesWithActiveStatusCanBeIndexed" xml:space="preserve">
    <value>Invalid Status! Only the Services with 'Active' status can be indexed!</value>
  </data>
  <data name="InvalidStatusOnlyTheServicesWithNewStatusCanBePrepared" xml:space="preserve">
    <value>Invalid Status! Only the Services with 'New' status can be prepared!</value>
  </data>
  <data name="InvalidStatusOnlyTheServicesWithPreparedOrActiveStatusCanBeExported" xml:space="preserve">
    <value>Invalid Status! Only the Services with 'Prepared' or 'Active' status can be exported!</value>
  </data>
  <data name="InvalidStatusOnlyTheServicesWithPreparedStatusCanBeActivated" xml:space="preserve">
    <value>Invalid Status! Only the Services with 'Prepared' status can be activated!</value>
  </data>
  <data name="NGramCantBeLargerThanTheNGramCountOfTheDataSet" xml:space="preserve">
    <value>NGram can't be larger than the NGramCount of the DataSet!</value>
  </data>
  <data name="NGramCountWasntPrepared" xml:space="preserve">
    <value>NGram count wasn't prepared!</value>
  </data>
  <data name="NGramListCantBeEmpty" xml:space="preserve">
    <value>NGramList can't be empty!</value>
  </data>
  <data name="NotEnoughResourceToActivateService" xml:space="preserve">
    <value>The server doesn't have enough resource to activate the service with the given settings!</value>
  </data>
  <data name="PartialIndexing_0_Service_1" xml:space="preserve">
    <value>Partial indexing {0} service {1}</value>
  </data>
  <data name="Preparing_0_Service_1" xml:space="preserve">
    <value>Preparing {0} service {1}</value>
  </data>
  <data name="ServiceNotExistsOrNotActivated" xml:space="preserve">
    <value>{0} Service not exists or not activated!</value>
  </data>
  <data name="SuccessfullyActivated_0_Service_1" xml:space="preserve">
    <value>Successfully activated {0} service {1}!</value>
  </data>
  <data name="SuccessfullyExportedDictionariesFrom_0_Service_1" xml:space="preserve">
    <value>Successfully exported dictionaries from {0} service {1}!</value>
  </data>
  <data name="SuccessfullyPrepared_0_Service_1" xml:space="preserve">
    <value>Successfully prepared {0} service {1}!</value>
  </data>
  <data name="TheFollowingEmphasizedTagIdsWereNotPrepared_0" xml:space="preserve">
    <value>The following EmphasizedTagIds were not prepared: {0}</value>
  </data>
  <data name="TheFollowingFieldsNotExistInTheSampleDocument_0" xml:space="preserve">
    <value>The following Fields not exist in the SampleDocument: {0}</value>
  </data>
  <data name="TheFollowingNGramsNotExistInTheService_0" xml:space="preserve">
    <value>The following NGrams not exist in the Services: {0}</value>
  </data>
  <data name="TheFollowingTagIdsNotExistInTheDataSet_0" xml:space="preserve">
    <value>The following TagIds not exist in the DataSet: {0}</value>
  </data>
  <data name="TheFollowingTagIdsNotExistInTheService_0" xml:space="preserve">
    <value>The following TagIds not exist in the Service: {0}</value>
  </data>
  <data name="TheFollowingTagIdsWereNotPrepared_0" xml:space="preserve">
    <value>The following TagIds were not prepared: {0}</value>
  </data>
  <data name="TheGivenTagHasNoWordsInDictionary" xml:space="preserve">
    <value>The given tag has no words in dictionary!</value>
  </data>
  <data name="TheGivenTagIsMissingFromThePRCService" xml:space="preserve">
    <value>The given tag is missing from the PRC Service!</value>
  </data>
  <data name="SuccessfullyIndexed_0_Service_1" xml:space="preserve">
    <value>Successfully indexed {0} service {1}!</value>
  </data>
  <data name="SuccessfullyPartialIndexed_0_Service_1" xml:space="preserve">
    <value>Successfully partial indexed {0} service {1}!</value>
  </data>
  <data name="IdCantBeEmptyIn_0_Settings" xml:space="preserve">
    <value>Id can't be empty in the {0} Settings!</value>
  </data>
</root>