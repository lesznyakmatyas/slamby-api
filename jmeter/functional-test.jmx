<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Functional test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">${__P(server)}/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secret" elementType="Argument">
            <stringProp name="Argument.name">secret</stringProp>
            <stringProp name="Argument.value">s3cr3t</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiVersion" elementType="Argument">
            <stringProp name="Argument.name">apiVersion</stringProp>
            <stringProp name="Argument.value">${__P(apiVersion)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="jmxDir" elementType="Argument">
            <stringProp name="Argument.name">jmxDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer;FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="datasetName" elementType="Argument">
            <stringProp name="Argument.name">datasetName</stringProp>
            <stringProp name="Argument.value">test-dataset</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tagsCount" elementType="Argument">
            <stringProp name="Argument.name">tagsCount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="documentsCount" elementType="Argument">
            <stringProp name="Argument.name">documentsCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="classifierName" elementType="Argument">
            <stringProp name="Argument.name">classifierName</stringProp>
            <stringProp name="Argument.value">test-classifier</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="recommendCount" elementType="Argument">
            <stringProp name="Argument.name">recommendCount</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prcName" elementType="Argument">
            <stringProp name="Argument.name">prcName</stringProp>
            <stringProp name="Argument.value">test-prc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="searchName" elementType="Argument">
            <stringProp name="Argument.name">searchName</stringProp>
            <stringProp name="Argument.value">test-search</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${server}/api</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout">100000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">100000</stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Headers" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Slamby ${secret}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">utf-8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
          </value>
        </objProp>
        <stringProp name="filename">~/result.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API version check" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425991617000</longProp>
        <longProp name="ThreadGroup.end_time">1425991617000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">status</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.ApiVersion</stringProp>
            <stringProp name="EXPECTED_VALUE">${apiVersion}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="SETUP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484052019000</longProp>
        <longProp name="ThreadGroup.end_time">1484052019000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Dataset" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="-1643459473">Functional test</stringProp>
            <stringProp name="2002012763">Dataset fragments</stringProp>
            <stringProp name="-320499380">Create Dataset </stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dataset" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1479971321000</longProp>
        <longProp name="ThreadGroup.end_time">1479971321000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Dataset Get / Get List" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Name</stringProp>
              <stringProp name="EXPECTED_VALUE">${datasetName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get List" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$[*].Name</stringProp>
              <stringProp name="EXPECTED_VALUE">${datasetName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Dataset update" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Update" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${datasetName}_&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}_</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Name</stringProp>
              <stringProp name="EXPECTED_VALUE">${datasetName}_</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Update" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${datasetName}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}_</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Name</stringProp>
              <stringProp name="EXPECTED_VALUE">${datasetName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Tag" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484134213000</longProp>
        <longProp name="ThreadGroup.end_time">1484134213000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Dataset Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Dataset</stringProp>
              <stringProp name="Header.value">${datasetName}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tags CRUD" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tagId" elementType="Argument">
                <stringProp name="Argument.name">tagId</stringProp>
                <stringProp name="Argument.value">11</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="parentTagId" elementType="Argument">
                <stringProp name="Argument.name">parentTagId</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add (parent)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${parentTagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${parentTagId}&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get (parent)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${parentTagId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Id</stringProp>
              <stringProp name="EXPECTED_VALUE">${parentTagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;ParentId&quot;: &quot;notExistingParentId&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 406" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51514">406</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;ParentId&quot;: &quot;${parentTagId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Id</stringProp>
              <stringProp name="EXPECTED_VALUE">${tagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.ParentId</stringProp>
              <stringProp name="EXPECTED_VALUE">${parentTagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$[*].Id</stringProp>
              <stringProp name="EXPECTED_VALUE">${parentTagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$[*].Id</stringProp>
              <stringProp name="EXPECTED_VALUE">${tagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Update (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${tagId}_&quot;,&#xd;
    &quot;ParentId&quot;: &quot;${parentTagId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Name</stringProp>
              <stringProp name="EXPECTED_VALUE">${tagId}_</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.ParentId</stringProp>
              <stringProp name="EXPECTED_VALUE">${parentTagId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Update (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Delete (child)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Delete (parent)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags/${parentTagId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Tags Add" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${tagsCount}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">tagId</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">tags</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">5 10</stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Document" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484138374000</longProp>
        <longProp name="ThreadGroup.end_time">1484138374000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Dataset Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Dataset</stringProp>
              <stringProp name="Header.value">${datasetName}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Documents CRUD" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="documentId" elementType="Argument">
                <stringProp name="Argument.name">documentId</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="documentTitle" elementType="Argument">
                <stringProp name="Argument.name">documentTitle</stringProp>
                <stringProp name="Argument.value">lorem ipsum dolor</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="documentDesc" elementType="Argument">
                <stringProp name="Argument.name">documentDesc</stringProp>
                <stringProp name="Argument.value">lorem ipsum dolor</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Add" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
    &quot;title&quot;: &quot;${documentTitle}&quot;,&#xd;
    &quot;desc&quot;: &quot;${documentDesc}&quot;,&#xd;
    &quot;tag&quot;: []&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">2 10 50 100 </stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.id</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.title</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentTitle}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.desc</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentDesc}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Update" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: ${documentId},&#xd;
    &quot;title&quot;: &quot;${documentTitle}_&quot;,&#xd;
    &quot;desc&quot;: &quot;${documentDesc}_&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.id</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentId}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.title</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentTitle}_</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.desc</stringProp>
              <stringProp name="EXPECTED_VALUE">${documentDesc}_</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Delete" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Bulk Add - TODO" enabled="false"/>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Documents Add" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${documentsCount}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">documentId</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Add" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
    &quot;title&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;desc&quot;: &quot;${randomText_1}&quot;,&#xd;
    &quot;tag&quot;: [${__V(${__Random(0,${tagsCount})})}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">documents</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">2 10 50 100 </stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Filter - TODO" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Document Sample - TODO" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Classifier" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484139972000</longProp>
        <longProp name="ThreadGroup.end_time">1484139972000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isPrepared" elementType="Argument">
              <stringProp name="Argument.name">isPrepared</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isActive" elementType="Argument">
              <stringProp name="Argument.name">isActive</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="serviceStatus" elementType="Argument">
              <stringProp name="Argument.name">serviceStatus</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepareNgramList" elementType="Argument">
              <stringProp name="Argument.name">prepareNgramList</stringProp>
              <stringProp name="Argument.value">[1,2,3]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="compressLevel" elementType="Argument">
              <stringProp name="Argument.name">compressLevel</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activateNgramList" elementType="Argument">
              <stringProp name="Argument.name">activateNgramList</stringProp>
              <stringProp name="Argument.value">[1,2,3]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Dataset Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Dataset</stringProp>
              <stringProp name="Header.value">${datasetName}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Classifier Create" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${classifierName}&quot;,&#xd;
    &quot;Description&quot;: &quot;This is an example service description&quot;,&#xd;
    &quot;Type&quot; : &quot;Classifier&quot;,&#xd;
    &quot;Alias&quot; : &quot;${classifierName}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">New</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Classifier Prepare" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Prepare" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;DataSetName&quot; : &quot;${datasetName}&quot;,&#xd;
    &quot;NGramList&quot;: ${prepareNgramList},&#xd;
    &quot;TagIdList&quot;: null,&#xd;
    &quot;CompressLevel&quot;: ${compressLevel},&#xd;
    &quot;CompressSettings&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/classifier/${classifierName}/prepare</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Prepared)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Classifier Preparing" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Prepared&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Preparing Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Classifier Activate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Activate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;NGramList&quot;: ${activateNgramList},&#xd;
    &quot;EmphasizedTagIdList&quot;: null,&#xd;
    &quot;TagIdList&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/classifier/${classifierName}/activate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Active)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Classifier Activating" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Active&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Activating Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Service Classifier Recommendation" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${recommendCount}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Recommend" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Text&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;Count&quot;: &quot;3&quot;,&#xd;
    &quot;UseEmphasizing&quot;: false,&#xd;
    &quot;NeedTagInResult&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">services/classifier/${classifierName}/recommend</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">50 60</stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="80566837">TagId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Classifier Deactivate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Deactivate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/classifier/${classifierName}/deactivate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${classifierName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">Prepared</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Prc" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484139972000</longProp>
        <longProp name="ThreadGroup.end_time">1484139972000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isPrepared" elementType="Argument">
              <stringProp name="Argument.name">isPrepared</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isActive" elementType="Argument">
              <stringProp name="Argument.name">isActive</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="serviceStatus" elementType="Argument">
              <stringProp name="Argument.name">serviceStatus</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="compressLevel" elementType="Argument">
              <stringProp name="Argument.name">compressLevel</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Dataset Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Dataset</stringProp>
              <stringProp name="Header.value">${datasetName}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Prc Create" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${prcName}&quot;,&#xd;
    &quot;Description&quot;: &quot;This is an example Prc service description&quot;,&#xd;
    &quot;Type&quot; : &quot;Prc&quot;,&#xd;
    &quot;Alias&quot; : &quot;${prcName}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">New</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Prc Prepare" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Prepare" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;DataSetName&quot; : &quot;${datasetName}&quot;,&#xd;
    &quot;TagIdList&quot;: null,&#xd;
    &quot;CompressLevel&quot;: ${compressLevel},&#xd;
    &quot;CompressSettings&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/prc/${prcName}/prepare</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Prepared)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Prc Preparing" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Prepared&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Preparing Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Prc Activate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Activate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;FieldsForRecommendation&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/prc/${prcName}/activate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Active)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Prc Activating" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Active&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Activating Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Service Prc Recommendation" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${recommendCount}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Prc Recommend" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Text&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;Count&quot;: &quot;2&quot;,&#xd;
    &quot;Filter&quot;: null,&#xd;
    &quot;Weights&quot;: null,&#xd;
    &quot;TagId&quot;: null,&#xd;
    &quot;NeedDocumentInResult&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">services/prc/${prcName}/recommend</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">50 60</stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1178524598">DocumentId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Prc Deactivate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Deactivate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/prc/${prcName}/deactivate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${prcName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">Prepared</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484139972000</longProp>
        <longProp name="ThreadGroup.end_time">1484139972000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isPrepared" elementType="Argument">
              <stringProp name="Argument.name">isPrepared</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isActive" elementType="Argument">
              <stringProp name="Argument.name">isActive</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="serviceStatus" elementType="Argument">
              <stringProp name="Argument.name">serviceStatus</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Dataset Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Dataset</stringProp>
              <stringProp name="Header.value">${datasetName}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Search Create" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${searchName}&quot;,&#xd;
    &quot;Description&quot;: &quot;This is an example service description&quot;,&#xd;
    &quot;Type&quot; : &quot;Search&quot;,&#xd;
    &quot;Alias&quot; : &quot;${searchName}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">New</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Search Prepare" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Prepare" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;DataSetName&quot; : &quot;${datasetName}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/search/${searchName}/prepare</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Prepared)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Search Preparing" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Prepared&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Preparing Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Search Activate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Activate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/search/${searchName}/activate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">(Busy|Active)</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Service Search Activating" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${serviceStatus}&quot; != &quot;Active&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Activating Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="JSON Path Extractor" enabled="true">
              <stringProp name="VAR">serviceStatus</stringProp>
              <stringProp name="JSONPATH">$.Status</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Service Search Search" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${recommendCount}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Search Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;Text&quot;: &quot;${randomText_0}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
            <stringProp name="HTTPSampler.path">services/search/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters">10 15</stringProp>
              <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1178524598">DocumentId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Search Deactivate" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Deactivate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/search/${searchName}/deactivate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Get" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Alias</stringProp>
              <stringProp name="EXPECTED_VALUE">${searchName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.Status</stringProp>
              <stringProp name="EXPECTED_VALUE">Prepared</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="TEARDOWN" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484052048000</longProp>
        <longProp name="ThreadGroup.end_time">1484052048000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Classifier Remove" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Classifier Remove" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${classifierName}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Prc Remove" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Prc Remove" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${prcName}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Service Search Remove" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Search Remove" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/${searchName}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Remove Dataset" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="-1643459473">Functional test</stringProp>
            <stringProp name="2002012763">Dataset fragments</stringProp>
            <stringProp name="382134492">Remove Dataset</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dataset fragments" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484132957000</longProp>
        <longProp name="ThreadGroup.end_time">1484132957000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Dataset " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Dataset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;IdField&quot;: &quot;id&quot;,&#xd;
    &quot;InterpretedFields&quot;: [&quot;title&quot;, &quot;desc&quot;],&#xd;
    &quot;Name&quot;: &quot;${datasetName}&quot;,&#xd;
    &quot;NGramCount&quot;: &quot;3&quot;,&#xd;
    &quot;TagField&quot;: &quot;tag&quot;,&#xd;
    &quot;SampleDocument&quot;: {&#xd;
        &quot;id&quot;: 9,&#xd;
        &quot;title&quot;: &quot;Example Product Title&quot;,&#xd;
        &quot;desc&quot;: &quot;Example Product Description&quot;,&#xd;
        &quot;tag&quot;: [1,2,3]&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/datasets</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Remove Dataset" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Dataset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Create" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;IdField&quot;: &quot;id&quot;,&#xd;
    &quot;InterpretedFields&quot;: [&quot;title&quot;, &quot;desc&quot;],&#xd;
    &quot;Name&quot;: &quot;${datasetName}&quot;,&#xd;
    &quot;NGramCount&quot;: &quot;3&quot;,&#xd;
    &quot;TagField&quot;: &quot;tag&quot;,&#xd;
    &quot;SampleDocument&quot;: {&#xd;
        &quot;id&quot;: 9,&#xd;
        &quot;title&quot;: &quot;Example Product Title&quot;,&#xd;
        &quot;desc&quot;: &quot;Example Product Description&quot;,&#xd;
        &quot;tag&quot;: [1,2,3]&#xd;
    }&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/datasets</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Get List" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">datasets</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Update" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;${datasetName}-renamed&quot;&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
        <stringProp name="HTTPSampler.method">PUT</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dataset Remove" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">datasets/${datasetName}</stringProp>
        <stringProp name="HTTPSampler.method">DELETE</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Add" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
    &quot;title&quot;: &quot;${randomTitle} - ${docIndex}&quot;,&#xd;
    &quot;desc&quot;: &quot;${randomContent}&quot;,&#xd;
    &quot;tag&quot;: [1,2,3]&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.util.Random;
// array of Strings 
String[] args={&quot;francia&quot;,&quot;idegenlégiós&quot;,&quot;kék&quot;,&quot;öv&quot;,&quot;táska&quot;,&quot;szett&quot;,&quot;db&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;forintért&quot;,&quot;zepter&quot;,&quot;edénykészelet&quot;,&quot;db&quot;,&quot;os&quot;,&quot;fém&quot;,&quot;tárolódoboz&quot;,&quot;eladó&quot;,&quot;pécsett&quot;,&quot;m2&quot;,&quot;körüli&quot;,&quot;házat&quot;,&quot;vennék&quot;,&quot;málylibák&quot;,&quot;eladók&quot;,&quot;4500&quot;,&quot;2x90&quot;,&quot;darabos&quot;,&quot;üveggolyó&quot;,&quot;készlet&quot;,&quot;kék&quot;,&quot;szürke&quot;,&quot;ford&quot;,&quot;bőr&quot;,&quot;kulcstartó&quot;,&quot;új&quot;,&quot;mini&quot;,&quot;gép&quot;,&quot;eladó&quot;,&quot;cnc&quot;,&quot;épített&quot;,&quot;eladó&quot;,&quot;nyílászárók&quot;,&quot;szigetelése&quot;,&quot;5&quot;,&quot;db&quot;,&quot;új&quot;,&quot;gumis&quot;,&quot;hajpánt&quot;,&quot;felső&quot;,&quot;csomag&quot;,&quot;os&quot;,&quot;viz&quot;,&quot;szivattyú&quot;,&quot;övtáska&quot;,&quot;távcső&quot;,&quot;tájoló&quot;,&quot;használt&quot;,&quot;rovarcsapda&quot;,&quot;ovis&quot;,&quot;ágyhoz&quot;,&quot;lepedő&quot;,&quot;1&quot;,&quot;sz&quot;,&quot;bútorozott&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;uránvárosban&quot;,&quot;szoba&quot;,&quot;kiadó&quot;,&quot;konyha&quot;,&quot;használattal&quot;,&quot;peg&quot;,&quot;preo&quot;,&quot;duo&quot;,&quot;fix&quot;,&quot;rendszerű&quot;,&quot;gyermekülés&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;gyermek&quot;,&quot;jelmez&quot;,&quot;orion&quot;,&quot;színes&quot;,&quot;tv&quot;,&quot;4&quot;,&quot;db&quot;,&quot;nike&quot;,&quot;fishbone&quot;,&quot;ny&quot;,&quot;férfi&quot;,&quot;póló&quot;,&quot;egyben&quot;,&quot;új&quot;,&quot;címkés&quot;,&quot;babakocsi&quot;,&quot;eladó&quot;,&quot;tatabányán&quot;,&quot;xii&quot;,&quot;zugligeti&quot;,&quot;erkélyes&quot;,&quot;lakás&quot;,&quot;akciós&quot;,&quot;áron&quot;,&quot;eladó&quot;,&quot;acer&quot;,&quot;emachines&quot;,&quot;e720&quot;,&quot;laptop&quot;,&quot;vadháló&quot;,&quot;drótfonat&quot;,&quot;kerítés&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;c&quot;,&quot;kanyar&quot;,&quot;követős&quot;,&quot;xenon&quot;,&quot;fényszoró&quot;,&quot;görgey&quot;,&quot;u&quot;,&quot;étkezőkonyhás&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;28as&quot;,&quot;fehér&quot;,&quot;szandál&quot;,&quot;új&quot;,&quot;gyermek&quot;,&quot;trikók&quot;,&quot;és&quot;,&quot;next&quot;,&quot;kislány&quot;,&quot;ruha&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;konyhai&quot;,&quot;sroküllö&quot;,&quot;asztala&quot;,&quot;szétnyitható&quot;,&quot;2&quot;,&quot;5m&quot;,&quot;magas&quot;,&quot;yukka&quot;,&quot;nokia&quot;,&quot;telenor&quot;,&quot;függő&quot;,&quot;fehér&quot;,&quot;szinben&quot;,&quot;aprilia&quot;,&quot;scarabeo&quot;,&quot;ütemű&quot;,&quot;eladó&quot;,&quot;mankó&quot;,&quot;kerék&quot;,&quot;col&quot;,&quot;os&quot;,&quot;eladó&quot;,&quot;lakás&quot;,&quot;a&quot;,&quot;fazekas&quot;,&quot;mihály&quot;,&quot;utcában&quot;,&quot;nagyobb&quot;,&quot;méretű&quot;,&quot;lány&quot;,&quot;ruhacsomag&quot;,&quot;fronius&quot;,&quot;ig&quot;,&quot;plus&quot;,&quot;v&quot;,&quot;inverter&quot;,&quot;barbis&quot;,&quot;térd&quot;,&quot;könyök&quot;,&quot;alkar&quot;,&quot;védő&quot;,&quot;elado&quot;,&quot;női&quot;,&quot;pávers&quot;,&quot;comfort&quot;,&quot;valodi&quot;,&quot;börcipö&quot;,&quot;2&quot;,&quot;db&quot;,&quot;r15&quot;,&quot;toyo&quot;,&quot;proxes&quot;,&quot;cf1&quot;,&quot;nyári&quot;,&quot;régi&quot;,&quot;kovácssatu&quot;,&quot;grace&quot;,&quot;női&quot;,&quot;válltáska&quot;,&quot;neonato&quot;,&quot;piuma&quot;,&quot;68&quot;,&quot;as&quot;,&quot;bébi&quot;,&quot;szabadidő&quot;,&quot;szett&quot;,&quot;mondeo&quot;,&quot;vezető&quot;,&quot;ülés&quot;,&quot;debrecenben&quot;,&quot;a&quot;,&quot;kishegyesi&quot;,&quot;úton&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;elado&quot;,&quot;férfi&quot;,&quot;m&quot;,&quot;es&quot;,&quot;dzseki&quot;,&quot;vadonat&quot;,&quot;uj&quot;,&quot;körfűrész&quot;,&quot;eladó&quot;,&quot;matt&quot;,&quot;üveg&quot;,&quot;kihúzhatós&quot;,&quot;számítógép&quot;,&quot;asztal&quot;,&quot;eladó&quot;,&quot;sicko&quot;,&quot;szürke&quot;,&quot;farmer&quot;,&quot;férfi&quot;,&quot;farmer&quot;,&quot;nadrág&quot;,&quot;86&quot;,&quot;os&quot;,&quot;melegítő&quot;,&quot;alsó&quot;,&quot;unisex&quot;,&quot;sürgősen&quot;,&quot;eladó&quot;,&quot;jó&quot;,&quot;állapotban&quot;,&quot;lévő&quot;,&quot;gitárok&quot;,&quot;pécsett&quot;,&quot;főútvonalon&quot;,&quot;éve&quot;,&quot;működő&quot;,&quot;vendéglő&quot;,&quot;kiadó&quot;,&quot;építőipari&quot;,&quot;szakközépiskolába&quot;,&quot;szükséges&quot;,&quot;tankönyvek&quot;,&quot;új&quot;,&quot;lux&quot;,&quot;uv&quot;,&quot;szűrős&quot;,&quot;babakocsi&quot;,&quot;napernyő&quot;,&quot;babakocsira&quot;,&quot;új&quot;,&quot;es&quot;,&quot;golddigga&quot;,&quot;vízálló&quot;,&quot;bakancs&quot;,&quot;vario&quot;,&quot;lux&quot;,&quot;maszirozógép&quot;,&quot;140&quot;,&quot;es&quot;,&quot;trambulin&quot;,&quot;fényújság&quot;,&quot;zöld&quot;,&quot;160x32&quot;,&quot;cm&quot;,&quot;fényreklám&quot;,&quot;új&quot;,&quot;szépséghibás&quot;,&quot;indesit&quot;,&quot;fagyasztó&quot;,&quot;garival&quot;,&quot;eladó&quot;,&quot;különleges&quot;,&quot;os&quot;,&quot;méretű&quot;,&quot;szoknyák&quot;,&quot;xbox&quot;,&quot;elite&quot;,&quot;dolce&quot;,&quot;gabbana&quot;,&quot;fekete&quot;,&quot;nadrág&quot;,&quot;anmar&quot;,&quot;hilux&quot;,&quot;3in1&quot;,&quot;multifunkciós&quot;,&quot;babakocsi&quot;,&quot;sugarbird&quot;,&quot;alsó&quot;,&quot;eladó&quot;,&quot;színben&quot;,&quot;új&quot;,&quot;kikstar&quot;,&quot;es&quot;,&quot;lány&quot;,&quot;farmer&quot;,&quot;dombostanyán&quot;,&quot;nm&quot;,&quot;es&quot;,&quot;ház&quot;,&quot;eladó&quot;,&quot;városmajori&quot;,&quot;lakás&quot;,&quot;matróz&quot;,&quot;blúz&quot;,&quot;h&quot;,&quot;m&quot;,&quot;kantáros&quot;,&quot;rövidnadrág&quot;,&quot;es&quot;,&quot;hónaposra&quot;,&quot;eladó&quot;,&quot;canon&quot;,&quot;bg&quot;,&quot;e13&quot;,&quot;portrémarkolat&quot;,&quot;opel&quot;,&quot;g&quot;,&quot;astra&quot;,&quot;x17dtl&quot;,&quot;motor&quot;,&quot;levis&quot;,&quot;es&quot;,&quot;farmer&quot;,&quot;es&quot;,&quot;mecman&quot;,&quot;pneumatikus&quot;,&quot;munkahenger&quot;,&quot;eladó&quot;,&quot;permetező&quot;,&quot;szár&quot;,&quot;háti&quot;,&quot;permetezőhöz&quot;,&quot;sony&quot;,&quot;minihifi&quot;,&quot;mp3&quot;,&quot;lejátszással&quot;,&quot;tökéletes&quot;,&quot;és&quot;,&quot;hibátl&quot;,&quot;angol&quot;,&quot;német&quot;,&quot;nyelvoktatás&quot;,&quot;ft&quot;,&quot;óra&quot;,&quot;számítógépasztal&quot;,&quot;íróasztal&quot;,&quot;asztal&quot;,&quot;klaviatúratartó&quot;,&quot;hajtó&quot;,&quot;kutya&quot;,&quot;eladó&quot;,&quot;üveg&quot;,&quot;csillár&quot;,&quot;eladó&quot;,&quot;magyar&quot;,&quot;tarka&quot;,&quot;tehén&quot;,&quot;bosh&quot;,&quot;mosógép&quot;,&quot;garanciával&quot;,&quot;vw&quot;,&quot;bora&quot;,&quot;16v&quot;,&quot;ahw&quot;,&quot;hengerfej&quot;,&quot;mercedes&quot;,&quot;benz&quot;,&quot;309d&quot;,&quot;tonnás&quot;,&quot;teherbirású&quot;,&quot;eladó&quot;,&quot;acer&quot;,&quot;aspire&quot;,&quot;magos&quot;,&quot;laptop&quot;,&quot;art&quot;,&quot;deco&quot;,&quot;bútorcsalád&quot;,&quot;egyben&quot;,&quot;vagy&quot;,&quot;darabonként&quot;,&quot;eladó&quot;,&quot;kovo&quot;,&quot;fiú&quot;,&quot;csizma&quot;,&quot;as&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;rendkívüli&quot;,&quot;áron&quot;,&quot;eladó&quot;,&quot;csepeli&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;fekete&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;p4&quot;,&quot;es&quot;,&quot;amd&quot;,&quot;konfiguráció&quot;,&quot;eladó&quot;,&quot;terasz&quot;,&quot;lehetőséges&quot;,&quot;üzlet&quot;,&quot;a&quot;,&quot;délinél&quot;,&quot;bering&quot;,&quot;motoros&quot;,&quot;ruha&quot;,&quot;keeway&quot;,&quot;huricane&quot;,&quot;élelmiszer&quot;,&quot;üzletbe&quot;,&quot;szakképzett&quot;,&quot;eladot&quot;,&quot;keresek&quot;,&quot;ravensburger&quot;,&quot;scotland&quot;,&quot;yard&quot;,&quot;társasjáték&quot;,&quot;női&quot;,&quot;40es&quot;,&quot;bőr&quot;,&quot;alkalmi&quot;,&quot;sebastiano&quot;,&quot;szandál&quot;,&quot;nagyméretű&quot;,&quot;kép&quot;,&quot;fekete&quot;,&quot;liliomokkal&quot;,&quot;debrecen&quot;,&quot;eladó&quot;,&quot;m2&quot;,&quot;es&quot;,&quot;családi&quot;,&quot;ház&quot;,&quot;lányka&quot;,&quot;fekete&quot;,&quot;hosszú&quot;,&quot;ujjú&quot;,&quot;debrecenben&quot;,&quot;a&quot;,&quot;kishegyesi&quot;,&quot;úton&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;msi&quot;,&quot;komplett&quot;,&quot;asztali&quot;,&quot;számítógép&quot;,&quot;eladó&quot;,&quot;nyíregyházán&quot;,&quot;náci&quot;,&quot;pecsétgyűrű&quot;,&quot;kitűző&quot;,&quot;övcsat&quot;,&quot;piros&quot;,&quot;kapucnis&quot;,&quot;pulóver&quot;,&quot;xl&quot;,&quot;angol&quot;,&quot;magánóra&quot;,&quot;ingyen&quot;,&quot;találkozó&quot;,&quot;szintfelmérés&quot;,&quot;pöttyös&quot;,&quot;könyv&quot;,&quot;fehér&quot;,&quot;klára&quot;,&quot;bezzeg&quot;,&quot;az&quot;,&quot;én&quot;,&quot;időmben&quot;,&quot;alkalmi&quot;,&quot;hosszú&quot;,&quot;ruha&quot;,&quot;samsung&quot;,&quot;np300&quot;,&quot;notebook&quot;,&quot;i5&quot;,&quot;posta&quot;,&quot;ok&quot;,&quot;agrár&quot;,&quot;egyetemhez&quot;,&quot;közeli&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;sata&quot;,&quot;hdd&quot;,&quot;750gb&quot;,&quot;rönkhasító&quot;,&quot;fahasító&quot;,&quot;eladó&quot;,&quot;azonnali&quot;,&quot;fizetés&quot;,&quot;az&quot;,&quot;elvégzett&quot;,&quot;munka&quot;,&quot;után&quot;,&quot;kludi&quot;,&quot;zuhany&quot;,&quot;csaptelep&quot;,&quot;nike&quot;,&quot;téli&quot;,&quot;kabát&quot;,&quot;möbelix&quot;,&quot;vaságy&quot;,&quot;keret&quot;,&quot;éjjeli&quot;,&quot;szekrény&quot;,&quot;batman&quot;,&quot;képregénycsomag&quot;,&quot;eladó&quot;,&quot;macbook&quot;,&quot;air&quot;,&quot;magyar&quot;,&quot;garanciás&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;4&quot;,&quot;lakkozott&quot;,&quot;frissen&quot;,&quot;kárpitozott&quot;,&quot;fa&quot;,&quot;székek&quot;,&quot;világos&quot;,&quot;kétszobás&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;kisállat&quot;,&quot;ketrec&quot;,&quot;samsung&quot;,&quot;cm&quot;,&quot;tv&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;mini&quot;,&quot;okostelefon&quot;,&quot;gt&quot;,&quot;s5570&quot;,&quot;möller&quot;,&quot;db&quot;,&quot;dugókulcs&quot;,&quot;krova&quot;,&quot;szerszámkészlet&quot;,&quot;igényes&quot;,&quot;kisfiú&quot;,&quot;ruhacsomag&quot;,&quot;92&quot;,&quot;74&quot;,&quot;es&quot;,&quot;fiú&quot;,&quot;ing&quot;,&quot;rugik&quot;,&quot;lánygyerek&quot;,&quot;cipők&quot;,&quot;hegesztő&quot;,&quot;trafó&quot;,&quot;néma&quot;,&quot;kacsák&quot;,&quot;női&quot;,&quot;irha&quot;,&quot;mellény&quot;,&quot;q24&quot;,&quot;fullhd&quot;,&quot;monitor&quot;,&quot;fortschritt&quot;,&quot;önjáró&quot;,&quot;kaszálógép&quot;,&quot;110&quot;,&quot;es&quot;,&quot;cherokee&quot;,&quot;póló&quot;,&quot;szoknya&quot;,&quot;csillogó&quot;,&quot;szivecskés&quot;,&quot;zte&quot;,&quot;skate&quot;,&quot;android&quot;,&quot;okos&quot;,&quot;mobiltelefon&quot;,&quot;eladó&quot;,&quot;ekrü&quot;,&quot;színú&quot;,&quot;alkalmi&quot;,&quot;cipő&quot;,&quot;os&quot;,&quot;maradj&quot;,&quot;talpon&quot;,&quot;társasjáték&quot;,&quot;ikeás&quot;,&quot;rattan&quot;,&quot;franciaágy&quot;,&quot;180x200cm&quot;,&quot;matrac&quot;,&quot;eladó&quot;,&quot;újszerű&quot;,&quot;siemens&quot;,&quot;kg36vx50&quot;,&quot;alul&quot;,&quot;fagyasztós&quot;,&quot;hű&quot;,&quot;gyönyörű&quot;,&quot;szép&quot;,&quot;gyári&quot;,&quot;független&quot;,&quot;fehér&quot;,&quot;iphone&quot;,&quot;jó&quot;,&quot;állapotú&quot;,&quot;mercedes&quot;,&quot;benz&quot;,&quot;alkatrészek&quot;,&quot;gyári&quot;,&quot;hp&quot;,&quot;p4&quot;,&quot;pc&quot;,&quot;lcd&quot;,&quot;kompletten&quot;,&quot;jó&quot;,&quot;állapotú&quot;,&quot;es&quot;,&quot;babetta&quot;,&quot;eladó&quot;,&quot;hideg&quot;,&quot;meleg&quot;,&quot;burkolást&quot;,&quot;térkövezés&quot;,&quot;opel&quot;,&quot;astra&quot;,&quot;sedan&quot;,&quot;iphone&quot;,&quot;független&quot;,&quot;csere&quot;,&quot;is&quot;,&quot;oxford&quot;,&quot;advanced&quot;,&quot;learner&quot;,&quot;s&quot;,&quot;dictionary&quot;,&quot;angol&quot;,&quot;szótár&quot;,&quot;jura&quot;,&quot;e40&quot;,&quot;automata&quot;,&quot;darálós&quot;,&quot;kávégép&quot;,&quot;saeco&quot;,&quot;konkurense&quot;,&quot;rozsdamentes&quot;,&quot;háttérhűtő&quot;,&quot;kültéri&quot;,&quot;led&quot;,&quot;szalag&quot;,&quot;új&quot;,&quot;fejvédő&quot;,&quot;kiságyba&quot;,&quot;függöny&quot;,&quot;karnis&quot;,&quot;db&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d800&quot;,&quot;x1050&quot;,&quot;felbontás&quot;,&quot;1700mhz&quot;,&quot;fiatalos&quot;,&quot;hölgy&quot;,&quot;munkát&quot;,&quot;keres&quot;,&quot;eladó&quot;,&quot;sony&quot;,&quot;vaio&quot;,&quot;core2duo&quot;,&quot;laptopom&quot;,&quot;kislány&quot;,&quot;rugdalozók&quot;,&quot;női&quot;,&quot;papucs&quot;,&quot;es&quot;,&quot;korbársony&quot;,&quot;tavaszi&quot;,&quot;kislány&quot;,&quot;nadrág&quot;,&quot;belgrád&quot;,&quot;rkp&quot;,&quot;on&quot;,&quot;szobás&quot;,&quot;bútorozott&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;eladó&quot;,&quot;kinai&quot;,&quot;moci&quot;,&quot;v&quot;,&quot;csere&quot;,&quot;súlyzó&quot;,&quot;két&quot;,&quot;kezes&quot;,&quot;kg&quot;,&quot;súllyal&quot;,&quot;alkalmi&quot;,&quot;áron&quot;,&quot;nokia&quot;,&quot;lumia&quot;,&quot;fekete&quot;,&quot;független&quot;,&quot;töltővel&quot;,&quot;ps4&quot;,&quot;watch&quot;,&quot;dogs&quot;,&quot;special&quot;,&quot;edition&quot;,&quot;magyar&quot;,&quot;felirattal&quot;,&quot;b&quot;,&quot;lego&quot;,&quot;creator&quot;,&quot;in1&quot;,&quot;féláron&quot;,&quot;43&quot;,&quot;nm&quot;,&quot;es&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;budapest&quot;,&quot;ker&quot;,&quot;nikecelgyöngy&quot;,&quot;köbméter&quot;,&quot;puma&quot;,&quot;és&quot;,&quot;adidas&quot;,&quot;cipő&quot;,&quot;új&quot;,&quot;eladó&quot;,&quot;több&quot;,&quot;méretbe&quot;,&quot;rieker&quot;,&quot;bőr&quot;,&quot;férfi&quot;,&quot;cipő&quot;,&quot;panasonic&quot;,&quot;sa&quot;,&quot;ch11&quot;,&quot;hifi&quot;,&quot;torony&quot;,&quot;apartman&quot;,&quot;átadó&quot;,&quot;munkatársakat&quot;,&quot;keresünk&quot;,&quot;eredeti&quot;,&quot;police&quot;,&quot;glory&quot;,&quot;férfi&quot;,&quot;karóra&quot;,&quot;kenvelo&quot;,&quot;rózsaszín&quot;,&quot;hosszú&quot;,&quot;ujjú&quot;,&quot;pulcsi&quot;,&quot;s&quot;,&quot;es&quot;,&quot;9w&quot;,&quot;os&quot;,&quot;körbetükrös&quot;,&quot;uv&quot;,&quot;lámpa&quot;,&quot;vita&quot;,&quot;team&quot;,&quot;sárgarépa&quot;,&quot;bioptron&quot;,&quot;lámpa&quot;,&quot;maxi&quot;,&quot;cosi&quot;,&quot;citi&quot;,&quot;sps&quot;,&quot;autósülés&quot;,&quot;hordozó&quot;,&quot;önetetők&quot;,&quot;etetőkosarak&quot;,&quot;lipótvárosi&quot;,&quot;nagypolgári&quot;,&quot;erkélyes&quot;,&quot;lakás&quot;,&quot;lego&quot;,&quot;friends&quot;,&quot;adventi&quot;,&quot;naptár&quot;,&quot;128&quot;,&quot;as&quot;,&quot;db&quot;,&quot;os&quot;,&quot;szett&quot;,&quot;kislányoknak&quot;,&quot;olcsó&quot;,&quot;gardrób&quot;,&quot;robot&quot;,&quot;hal&quot;,&quot;robofish&quot;,&quot;elemmel&quot;,&quot;úszik&quot;,&quot;mint&quot;,&quot;a&quot;,&quot;igazi&quot;,&quot;fehér&quot;,&quot;esküvői&quot;,&quot;ruha&quot;,&quot;kiváló&quot;,&quot;állapotban&quot;,&quot;játszószőnyeg&quot;,&quot;összerakható&quot;,&quot;hamburger&quot;,&quot;fajáték&quot;,&quot;új&quot;,&quot;elado&quot;,&quot;sodrott&quot;,&quot;kanca&quot;,&quot;tiszalökön&quot;,&quot;teljesen&quot;,&quot;új&quot;,&quot;ágyneműtartó&quot;,&quot;szekrény&quot;,&quot;eladó&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;s4&quot;,&quot;gt&quot;,&quot;i9505&quot;,&quot;gyári&quot;,&quot;független&quot;,&quot;msi&quot;,&quot;cr610&quot;,&quot;laptop&quot;,&quot;eladó&quot;,&quot;aeg&quot;,&quot;kg&quot;,&quot;digit&quot;,&quot;mosógép&quot;,&quot;monoron&quot;,&quot;eladó&quot;,&quot;fizika&quot;,&quot;jól&quot;,&quot;felkészültem&quot;,&quot;e&quot;,&quot;mitsubishi&quot;,&quot;pajeró&quot;,&quot;bontás&quot;,&quot;a&quot;,&quot;z&quot;,&quot;ig&quot;,&quot;minden&quot;,&quot;alfa&quot;,&quot;romeo&quot;,&quot;selespeed&quot;,&quot;alkatrészek&quot;,&quot;gt&quot;,&quot;kiadó&quot;,&quot;lakás&quot;,&quot;albérlet&quot;,&quot;szeged&quot;,&quot;belváros&quot;,&quot;guttemberg&quot;,&quot;ut&quot;,&quot;m&quot;,&quot;l&quot;,&quot;méretű&quot;,&quot;férfi&quot;,&quot;pulóver&quot;,&quot;csomag&quot;,&quot;yamaha&quot;,&quot;axis&quot;,&quot;50ccm&quot;,&quot;lenovo&quot;,&quot;ideapad&quot;,&quot;z580&quot;,&quot;laptop&quot;,&quot;eladó&quot;,&quot;xbox&quot;,&quot;forza&quot;,&quot;4&quot;,&quot;konyha&quot;,&quot;szekrény&quot;,&quot;kiárusítás&quot;,&quot;gázterv&quot;,&quot;készítés&quot;,&quot;logitech&quot;,&quot;z523&quot;,&quot;hangfalszett&quot;,&quot;új&quot;,&quot;garis&quot;,&quot;100&quot;,&quot;kg&quot;,&quot;arnold&quot;,&quot;gumírozott&quot;,&quot;súlytárcsa&quot;,&quot;eladó&quot;,&quot;31mm&quot;,&quot;great&quot;,&quot;mtb&quot;,&quot;felni&quot;,&quot;pár&quot;,&quot;x20&quot;,&quot;intel&quot;,&quot;core&quot;,&quot;i3&quot;,&quot;pc&quot;,&quot;x2&quot;,&quot;9ghz&quot;,&quot;4gb&quot;,&quot;320gb&quot;,&quot;lcd&quot;,&quot;eladó&quot;,&quot;5&quot;,&quot;col&quot;,&quot;gps&quot;,&quot;navigáció&quot;,&quot;radiotech&quot;,&quot;factory&quot;,&quot;garanciával&quot;,&quot;házimozi&quot;,&quot;erősítő&quot;,&quot;nevetö&quot;,&quot;sohajtó&quot;,&quot;baba&quot;,&quot;adidas&quot;,&quot;kislánycipő&quot;,&quot;32es&quot;,&quot;belső&quot;,&quot;talp&quot;,&quot;hossza&quot;,&quot;20cm&quot;,&quot;másodosztályú&quot;,&quot;trapézlemez&quot;,&quot;eladó&quot;,&quot;deutz&quot;,&quot;típusú&quot;,&quot;kis&quot;,&quot;traktor&quot;,&quot;whirlpool&quot;,&quot;hűtőszekrény&quot;,&quot;befektetőt&quot;,&quot;társat&quot;,&quot;keresek&quot;,&quot;spanyolországba&quot;,&quot;babapléd&quot;,&quot;ágynemű&quot;,&quot;új&quot;,&quot;komfort&quot;,&quot;plusz&quot;,&quot;táskarugós&quot;,&quot;matrac&quot;,&quot;160x200x18&quot;,&quot;cm&quot;,&quot;hibás&quot;,&quot;autó&quot;,&quot;akumlátor&quot;,&quot;töltő&quot;,&quot;cica&quot;,&quot;tatabányán&quot;,&quot;ingyen&quot;,&quot;elvihető&quot;,&quot;hilti&quot;,&quot;te&quot;,&quot;bontókalapács&quot;,&quot;lányka&quot;,&quot;női&quot;,&quot;cipők&quot;,&quot;eladó&quot;,&quot;3&quot;,&quot;m&quot;,&quot;hosszú&quot;,&quot;kamrás&quot;,&quot;gumi&quot;,&quot;motorcsónak&quot;,&quot;verbatim&quot;,&quot;led&quot;,&quot;égő&quot;,&quot;reebok&quot;,&quot;athletic&quot;,&quot;eredeti&quot;,&quot;zara&quot;,&quot;öltöny&quot;,&quot;alkalommal&quot;,&quot;használt&quot;,&quot;akció&quot;,&quot;ágyazható&quot;,&quot;sarokkanapé&quot;,&quot;nagyon&quot;,&quot;olcsó&quot;,&quot;fürdőszoba&quot;,&quot;elegant&quot;,&quot;fali&quot;,&quot;alsó&quot;,&quot;szekrény&quot;,&quot;55cm&quot;,&quot;mosdó&quot;,&quot;3db&quot;,&quot;új&quot;,&quot;lámpatest&quot;,&quot;3db&quot;,&quot;új&quot;,&quot;fénycsővel&quot;,&quot;egyben&quot;,&quot;olcsón&quot;,&quot;vennék&quot;,&quot;saját&quot;,&quot;részre&quot;,&quot;egy&quot;,&quot;x&quot;,&quot;box&quot;,&quot;gépet&quot;,&quot;játékokkal&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;lenovo&quot;,&quot;t400&quot;,&quot;eladó&quot;,&quot;újszerű&quot;,&quot;állapotban&quot;,&quot;niva&quot;,&quot;hid&quot;,&quot;eladó&quot;,&quot;velorex&quot;,&quot;kerék&quot;,&quot;eladó&quot;,&quot;besafe&quot;,&quot;izi&quot;,&quot;combi&quot;,&quot;x3&quot;,&quot;isofix&quot;,&quot;biztonsági&quot;,&quot;gyerekülés&quot;,&quot;donna&quot;,&quot;christina&quot;,&quot;cipő&quot;,&quot;nadrágkosztüm&quot;,&quot;jó&quot;,&quot;áron&quot;,&quot;teniszütő&quot;,&quot;pár&quot;,&quot;mikszáth&quot;,&quot;kálmán&quot;,&quot;utcai&quot;,&quot;emeleti&quot;,&quot;szobás&quot;,&quot;lakás&quot;,&quot;el&quot;,&quot;hajdúböszörményben&quot;,&quot;társasházi&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;20&quot;,&quot;gyerek&quot;,&quot;kerékpár&quot;,&quot;fekete&quot;,&quot;seat&quot;,&quot;cordoba&quot;,&quot;iii&quot;,&quot;ajtós&quot;,&quot;centrálzár&quot;,&quot;öntöttvas&quot;,&quot;kályha&quot;,&quot;házhoz&quot;,&quot;szállítással&quot;,&quot;pest&quot;,&quot;megyén&quot;,&quot;b&quot;,&quot;nyaklánccal&quot;,&quot;titanic&quot;,&quot;love&quot;,&quot;szett&quot;,&quot;6&quot;,&quot;tömör&quot;,&quot;gumi&quot;,&quot;felnivel&quot;,&quot;repülő&quot;,&quot;zöld&quot;,&quot;füli&quot;,&quot;új&quot;,&quot;baba&quot;,&quot;körömvágó&quot;,&quot;szett&quot;,&quot;darabos&quot;,&quot;krokodilbőr&quot;,&quot;táska&quot;,&quot;2&quot;,&quot;dl&quot;,&quot;es&quot;,&quot;bögre&quot;,&quot;műanyag&quot;,&quot;szép&quot;,&quot;szinekbe&quot;,&quot;amerikai&quot;,&quot;bulldog&quot;,&quot;abit&quot;,&quot;p4&quot;,&quot;2666mhz&quot;,&quot;pc&quot;,&quot;olcsón&quot;,&quot;215&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;michelin&quot;,&quot;diana&quot;,&quot;cm&quot;,&quot;es&quot;,&quot;sarok&quot;,&quot;blokk&quot;,&quot;konyhabútor&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;esküvői&quot;,&quot;ruha&quot;,&quot;eladó&quot;,&quot;gilera&quot;,&quot;runner&quot;,&quot;vxr&quot;,&quot;125cc&quot;,&quot;hannsg&quot;,&quot;hw191d&quot;,&quot;monitor&quot;,&quot;bébé&quot;,&quot;comfort&quot;,&quot;omega&quot;,&quot;etetőszék&quot;,&quot;szép&quot;,&quot;állapotban&quot;,&quot;eladó&quot;,&quot;premier&quot;,&quot;b&quot;,&quot;wood&quot;,&quot;vezetői&quot;,&quot;bőrfotel&quot;,&quot;eladó&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;festékkeverő&quot;,&quot;habarcskeverő&quot;,&quot;1400w&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;festékkeverő&quot;,&quot;habarcskeverő&quot;,&quot;1400w&quot;,&quot;likőrös&quot;,&quot;készlet&quot;,&quot;megbízható&quot;,&quot;nehézgépkezelőt&quot;,&quot;keresek&quot;,&quot;intel&quot;,&quot;dual&quot;,&quot;core&quot;,&quot;g840&quot;,&quot;ghz&quot;,&quot;lga1155&quot;,&quot;processzor&quot;,&quot;bukósisak&quot;,&quot;eladó&quot;,&quot;fehér&quot;,&quot;babafelső&quot;,&quot;galamb&quot;,&quot;lila&quot;,&quot;füli&quot;,&quot;teljesen&quot;,&quot;új&quot;,&quot;kutyatáska&quot;,&quot;eladó&quot;,&quot;10&quot;,&quot;hetes&quot;,&quot;cirmos&quot;,&quot;kiscica&quot;,&quot;bkv&quot;,&quot;bkk&quot;,&quot;éves&quot;,&quot;bérlet&quot;,&quot;2014&quot;,&quot;koloniál&quot;,&quot;komplett&quot;,&quot;garnitúra&quot;,&quot;koloniál&quot;,&quot;komplett&quot;,&quot;garnitúra&quot;,&quot;nancy&quot;,&quot;fürdőszoba&quot;,&quot;bútor&quot;,&quot;mosdó&quot;,&quot;nélkül&quot;,&quot;ágyazható&quot;,&quot;sarokülő&quot;,&quot;bak&quot;,&quot;kecske&quot;,&quot;gida&quot;,&quot;hónapos&quot;,&quot;barna&quot;,&quot;átmeneti&quot;,&quot;női&quot;,&quot;cipő&quot;,&quot;aprilia&quot;,&quot;sr&quot;,&quot;50&quot;,&quot;emu&quot;,&quot;piros&quot;,&quot;füli&quot;,&quot;fekete&quot;,&quot;selyeming&quot;,&quot;prestigio&quot;,&quot;multipad&quot;,&quot;prime&quot;,&quot;duo&quot;,&quot;3g&quot;,&quot;wifi&quot;,&quot;orion&quot;,&quot;televízió&quot;,&quot;mindigtv&quot;,&quot;extra&quot;,&quot;csomaggal&quot;,&quot;lakástakarék&quot;,&quot;szerződés&quot;,&quot;devizahitelesek&quot;,&quot;részére&quot;,&quot;dohányzóasztal&quot;,&quot;exeter&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;gyors&quot;,&quot;daraboló&quot;,&quot;355mm&quot;,&quot;koronggal&quot;,&quot;új&quot;,&quot;tommee&quot;,&quot;tippee&quot;,&quot;kézi&quot;,&quot;mellszívó&quot;,&quot;cserépkályha&quot;,&quot;épités&quot;,&quot;a&quot;,&quot;legolcsobban&quot;,&quot;garanciával&quot;,&quot;cserépkályha&quot;,&quot;épités&quot;,&quot;a&quot;,&quot;legolcsobban&quot;,&quot;garanciával&quot;,&quot;genius&quot;,&quot;billentyüzet&quot;,&quot;escada&quot;,&quot;i&quot;,&quot;as&quot;,&quot;franciaágy&quot;,&quot;samsung&quot;,&quot;p5100&quot;,&quot;galaxy&quot;,&quot;tab&quot;,&quot;g&quot;,&quot;beltéri&quot;,&quot;üvegburás&quot;,&quot;lámpacsalád&quot;,&quot;eladó&quot;,&quot;póni&quot;,&quot;fogat&quot;,&quot;205&quot;,&quot;45r17&quot;,&quot;használt&quot;,&quot;continental&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;20&quot;,&quot;lábas&quot;,&quot;konténer&quot;,&quot;raktárkonténer&quot;,&quot;garázs&quot;,&quot;olcsón&quot;,&quot;új&quot;,&quot;irha&quot;,&quot;mellény&quot;,&quot;babának&quot;,&quot;kumho&quot;,&quot;powergrip&quot;,&quot;r16&quot;,&quot;c&quot;,&quot;téli&quot;,&quot;gumik&quot;,&quot;2db&quot;,&quot;10&quot;,&quot;os&quot;,&quot;új&quot;,&quot;android&quot;,&quot;tablet&quot;,&quot;3g&quot;,&quot;vel&quot;,&quot;gépjármű&quot;,&quot;felelősségbiztosítások&quot;,&quot;casco&quot;,&quot;huawei&quot;,&quot;mediapad&quot;,&quot;s7&quot;,&quot;301u&quot;,&quot;maria&quot;,&quot;dankowska&quot;,&quot;négyszemközt&quot;,&quot;nokia&quot;,&quot;lumia&quot;,&quot;fekete&quot;,&quot;és&quot;,&quot;fehér&quot;,&quot;tok&quot;,&quot;optimus&quot;,&quot;l5&quot;,&quot;ii&quot;,&quot;lg&quot;,&quot;e460&quot;,&quot;új&quot;,&quot;mobiltelefon&quot;,&quot;eladó&quot;,&quot;fehé&quot;,&quot;vw&quot;,&quot;passat&quot;,&quot;pdtdi&quot;,&quot;vaj&quot;,&quot;bőr&quot;,&quot;digit&quot;,&quot;klíma&quot;,&quot;vonóh&quot;,&quot;seb&quot;,&quot;fodrász&quot;,&quot;bútorok&quot;,&quot;iphone&quot;,&quot;kemény&quot;,&quot;hátlap&quot;,&quot;tok&quot;,&quot;27&quot;,&quot;es&quot;,&quot;méretű&quot;,&quot;koptatott&quot;,&quot;farmer&quot;,&quot;nadrág&quot;,&quot;faust&quot;,&quot;kötelező&quot;,&quot;olvasmány&quot;,&quot;eladó&quot;,&quot;philips&quot;,&quot;avent&quot;,&quot;elektromos&quot;,&quot;mellszívó&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;alighasznált&quot;,&quot;digitális&quot;,&quot;fényképezö&quot;,&quot;gép&quot;,&quot;csavarodásmentes&quot;,&quot;locsolótömlő&quot;,&quot;tömlő&quot;,&quot;slag&quot;,&quot;25m&quot;,&quot;új&quot;,&quot;straus&quot;,&quot;austria&quot;,&quot;dekopír&quot;,&quot;fűrész&quot;,&quot;w&quot;,&quot;audi&quot;,&quot;a4&quot;,&quot;t&quot;,&quot;cserélhető&quot;,&quot;leárazás&quot;,&quot;gyerek&quot;,&quot;sícipő&quot;,&quot;kislány&quot;,&quot;póló&quot;,&quot;ruha&quot;,&quot;blúz&quot;,&quot;manda&quot;,&quot;scott&quot;,&quot;boudica&quot;,&quot;a&quot;,&quot;bika&quot;,&quot;látomása&quot;,&quot;eladó&quot;,&quot;lada&quot;,&quot;2107&quot;,&quot;chezlandi&quot;,&quot;póni&quot;,&quot;eladó&quot;,&quot;minnesotai&quot;,&quot;törpemalacok&quot;,&quot;kecskeméten&quot;,&quot;bmw&quot;,&quot;a&quot;,&quot;vevő&quot;,&quot;nevére&quot;,&quot;átírva&quot;,&quot;az&quot;,&quot;árban&quot;,&quot;szentendre&quot;,&quot;belvárosi&quot;,&quot;ajándékboltba&quot;,&quot;eladó&quot;,&quot;rózsaszínű&quot;,&quot;szélén&quot;,&quot;fekete&quot;,&quot;csipkés&quot;,&quot;szexis&quot;,&quot;fűző&quot;,&quot;simson&quot;,&quot;sr&quot;,&quot;gyári&quot;,&quot;állapotban&quot;,&quot;215&quot;,&quot;65r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;dunlop&quot;,&quot;ford&quot;,&quot;sierra&quot;,&quot;alkatrész&quot;,&quot;eladó&quot;,&quot;nagyméretű&quot;,&quot;gyapjú&quot;,&quot;szőnyeg19900&quot;,&quot;ft&quot;,&quot;ért&quot;,&quot;skoda&quot;,&quot;fábia&quot;,&quot;16v&quot;,&quot;eladó&quot;,&quot;pénzkazetta&quot;,&quot;overmax&quot;,&quot;ov&quot;,&quot;tb&quot;,&quot;iii&quot;,&quot;e&quot;,&quot;7col&quot;,&quot;táblagép&quot;,&quot;4gb&quot;,&quot;androi&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;ab&quot;,&quot;circle&quot;,&quot;pro&quot;,&quot;rakodó&quot;,&quot;munka&quot;,&quot;londonban&quot;,&quot;az&quot;,&quot;arla&quot;,&quot;tejüzemben&quot;,&quot;2&quot;,&quot;kecske&quot;,&quot;eladó&quot;,&quot;16&quot;,&quot;lila&quot;,&quot;biciki&quot;,&quot;205&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;michelin&quot;,&quot;4db&quot;,&quot;espiro&quot;,&quot;delta&quot;,&quot;autósülés&quot;,&quot;autós&quot;,&quot;gyerekülés&quot;,&quot;kg&quot;,&quot;co&quot;,&quot;235&quot;,&quot;45r17&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;fulda&quot;,&quot;sony&quot;,&quot;vaio&quot;,&quot;vgn&quot;,&quot;fw31zj&quot;,&quot;citroen&quot;,&quot;c3&quot;,&quot;hdi&quot;,&quot;profi&quot;,&quot;ac&quot;,&quot;temp&quot;,&quot;köd&quot;,&quot;gari&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;pocket&quot;,&quot;neo&quot;,&quot;h&quot;,&quot;m&quot;,&quot;loafer&quot;,&quot;eladó&quot;,&quot;gyermek&quot;,&quot;úszómellény&quot;,&quot;bider&quot;,&quot;kristály&quot;,&quot;serleg&quot;,&quot;burkolókat&quot;,&quot;keresek&quot;,&quot;azonnali&quot;,&quot;kezdéssel&quot;,&quot;nokia&quot;,&quot;c2&quot;,&quot;hibás&quot;,&quot;ufesa&quot;,&quot;bh&quot;,&quot;lábmasszírozó&quot;,&quot;lábfürdő&quot;,&quot;fekete&quot;,&quot;metál&quot;,&quot;golf&quot;,&quot;iv&quot;,&quot;eladó&quot;,&quot;185r&quot;,&quot;14c&quot;,&quot;kia&quot;,&quot;k2700&quot;,&quot;diákoknak&quot;,&quot;munkalehetőség&quot;,&quot;kazinbarcikán&quot;,&quot;samsung&quot;,&quot;i8200&quot;,&quot;galaxy&quot;,&quot;s3&quot;,&quot;mini&quot;,&quot;vadonatúj&quot;,&quot;tengerparti&quot;,&quot;mobil&quot;,&quot;ház&quot;,&quot;vásárlási&quot;,&quot;ajánlat&quot;,&quot;dalmáciába&quot;,&quot;magasszárú&quot;,&quot;cipő&quot;,&quot;fényszóró&quot;,&quot;magasság&quot;,&quot;állító&quot;,&quot;motorok&quot;,&quot;eladó&quot;,&quot;fiat&quot;,&quot;brava&quot;,&quot;bravo&quot;,&quot;marea&quot;,&quot;fényszóró&quot;,&quot;gyári&quot;,&quot;2db&quot;,&quot;fotó&quot;,&quot;diszkó&quot;,&quot;vagy&quot;,&quot;infrázáshoz&quot;,&quot;lámpa&quot;,&quot;leonora&quot;,&quot;franciaágy&quot;,&quot;american&quot;,&quot;bully&quot;,&quot;champagne&quot;,&quot;puppy&quot;,&quot;for&quot;,&quot;sale&quot;,&quot;kan&quot;,&quot;fedez&quot;,&quot;cukrászda&quot;,&quot;cukrászüzem&quot;,&quot;abda&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;ps5207&quot;,&quot;delux&quot;,&quot;pihenőszék&quot;,&quot;delphi&quot;,&quot;programozókat&quot;,&quot;keresünk&quot;,&quot;építöiparban&quot;,&quot;jártas&quot;,&quot;örökbe&quot;,&quot;fogadható&quot;,&quot;kutya&quot;,&quot;mandy&quot;,&quot;azonnal&quot;,&quot;altatható&quot;,&quot;ford&quot;,&quot;fiesta&quot;,&quot;mk6&quot;,&quot;sport&quot;,&quot;szárny&quot;,&quot;e&quot;,&quot;go&quot;,&quot;t&quot;,&quot;elektromos&quot;,&quot;cigi&quot;,&quot;olcsón&quot;,&quot;epson&quot;,&quot;stylus&quot;,&quot;photo&quot;,&quot;nyomtató&quot;,&quot;opel&quot;,&quot;vivaro&quot;,&quot;felújított&quot;,&quot;váltók&quot;,&quot;eladók&quot;,&quot;crazy&quot;,&quot;fit&quot;,&quot;massage&quot;,&quot;iphone&quot;,&quot;3g&quot;,&quot;eladó&quot;,&quot;vagy&quot;,&quot;csere&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;mini&quot;,&quot;eladó&quot;,&quot;használt&quot;,&quot;ariston&quot;,&quot;ls248t&quot;,&quot;mosogatógép&quot;,&quot;160gb&quot;,&quot;os&quot;,&quot;gef&quot;,&quot;7300gt&quot;,&quot;s&quot;,&quot;mhz&quot;,&quot;es&quot;,&quot;lenovo&quot;,&quot;lcd&quot;,&quot;elado&quot;,&quot;gyonyoru&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;eladó&quot;,&quot;baby&quot;,&quot;merc&quot;,&quot;agat&quot;,&quot;lux&quot;,&quot;babakocsi&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;kiegészítők&quot;,&quot;eladó&quot;,&quot;honda&quot;,&quot;gyro&quot;,&quot;canopy50&quot;,&quot;185&quot;,&quot;60r14&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;goodyear&quot;,&quot;nike&quot;,&quot;női&quot;,&quot;cipő&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;gyalugép&quot;,&quot;és&quot;,&quot;vastagoló&quot;,&quot;konyhai&quot;,&quot;gyakorlattal&quot;,&quot;eladó&quot;,&quot;kerestetik&quot;,&quot;eladó&quot;,&quot;használt&quot;,&quot;acer&quot;,&quot;5750g&quot;,&quot;laptop&quot;,&quot;digtafon&quot;,&quot;kassetás&quot;,&quot;mini&quot;,&quot;tisztasági&quot;,&quot;festés&quot;,&quot;olcsón&quot;,&quot;új&quot;,&quot;samsung&quot;,&quot;n7100&quot;,&quot;galaxy&quot;,&quot;note&quot;,&quot;fehér&quot;,&quot;színben&quot;,&quot;babahordozó&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;magyar&quot;,&quot;szakos&quot;,&quot;tanár&quot;,&quot;lenovo&quot;,&quot;y580&quot;,&quot;gamer&quot;,&quot;i7&quot;,&quot;8gb&quot;,&quot;1tb&quot;,&quot;128gb&quot;,&quot;660m&quot;,&quot;fhd&quot;,&quot;canon&quot;,&quot;nyomtatópatronok&quot;,&quot;lada&quot;,&quot;samara&quot;,&quot;motorháztető&quot;,&quot;eladó&quot;,&quot;suzuki&quot;,&quot;swift&quot;,&quot;gl&quot;,&quot;irány&quot;,&quot;ár&quot;,&quot;tp&quot;,&quot;link&quot;,&quot;wr340gd&quot;,&quot;kombinált&quot;,&quot;gyalugép&quot;,&quot;pioneer&quot;,&quot;sc&quot;,&quot;lx75&quot;,&quot;csatornás&quot;,&quot;házimozi&quot;,&quot;erősítő&quot;,&quot;franciarudas&quot;,&quot;súlyzó&quot;,&quot;készlet&quot;,&quot;kg&quot;,&quot;samsung&quot;,&quot;tv&quot;,&quot;cw29m066&quot;,&quot;használt&quot;,&quot;tako&quot;,&quot;babakocsi&quot;,&quot;nyomtató&quot;,&quot;patron&quot;,&quot;ft&quot;,&quot;db&quot;,&quot;szakácsot&quot;,&quot;keresek&quot;,&quot;üveglapos&quot;,&quot;dohányzó&quot;,&quot;asztal&quot;,&quot;hp&quot;,&quot;compaq&quot;,&quot;nc8430&quot;,&quot;gamer&quot;,&quot;165&quot;,&quot;70r14&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;4db&quot;,&quot;firestone&quot;,&quot;némakacsa&quot;,&quot;tojó&quot;,&quot;apró&quot;,&quot;lánykutya&quot;,&quot;gazdához&quot;,&quot;menne&quot;,&quot;tacskó&quot;,&quot;cannon&quot;,&quot;ip&quot;,&quot;tintasugaras&quot;,&quot;nyomtató&quot;,&quot;htc&quot;,&quot;one&quot;,&quot;eladó&quot;,&quot;csere&quot;,&quot;tóparti&quot;,&quot;építési&quot;,&quot;telek&quot;,&quot;délegyházán&quot;,&quot;zajcsökkentö&quot;,&quot;stereo&quot;,&quot;headsett&quot;,&quot;ujonnan&quot;,&quot;olcsón&quot;,&quot;artemisz&quot;,&quot;franciaágy&quot;,&quot;ágyneműtartós&quot;,&quot;140x200cm&quot;,&quot;pedrollo&quot;,&quot;easypress&quot;,&quot;ii&quot;,&quot;áramláskapcsoló&quot;,&quot;sony&quot;,&quot;hagyományos&quot;,&quot;színes&quot;,&quot;tv&quot;,&quot;új&quot;,&quot;állapotú&quot;,&quot;kőroppantó&quot;,&quot;nokia&quot;,&quot;c&quot;,&quot;00&quot;,&quot;kismama&quot;,&quot;felső&quot;,&quot;babaruhák&quot;,&quot;eladóak&quot;,&quot;szekrénysor&quot;,&quot;régi&quot;,&quot;tipusú&quot;,&quot;új&quot;,&quot;színes&quot;,&quot;pamut&quot;,&quot;törölköző&quot;,&quot;db&quot;,&quot;háztól&quot;,&quot;házig&quot;,&quot;elado&quot;,&quot;arany&quot;,&quot;ékszer&quot;,&quot;vasasztal&quot;,&quot;satukkal&quot;,&quot;újságtartó&quot;,&quot;remek&quot;,&quot;áron&quot;,&quot;választási&quot;,&quot;malacok&quot;,&quot;eladók&quot;,&quot;wewood&quot;,&quot;alpha&quot;,&quot;csokoládé&quot;,&quot;karóra&quot;,&quot;új&quot;,&quot;sony&quot;,&quot;xperia&quot;,&quot;z&quot;,&quot;c6603&quot;,&quot;vadonatúj&quot;,&quot;kártya&quot;,&quot;erdészettól&quot;,&quot;konyhakész&quot;,&quot;tüzifa&quot;,&quot;garantált&quot;,&quot;mennyiség&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;3g&quot;,&quot;16gb&quot;,&quot;fekete&quot;,&quot;színben&quot;,&quot;betegápolást&quot;,&quot;idős&quot;,&quot;emberek&quot;,&quot;gondozását&quot;,&quot;vállalom&quot;,&quot;eladó&quot;,&quot;es&quot;,&quot;gyári&quot;,&quot;opel&quot;,&quot;alufelni&quot;,&quot;4x100&quot;,&quot;állás&quot;,&quot;budapest&quot;,&quot;it&quot;,&quot;telekommunikáció&quot;,&quot;converse&quot;,&quot;cipő&quot;,&quot;komplett&quot;,&quot;őszi&quot;,&quot;ruhacsomag&quot;,&quot;ajándék&quot;,&quot;új&quot;,&quot;nem&quot;,&quot;gsm&quot;,&quot;boltos&quot;,&quot;motorola&quot;,&quot;moto&quot;,&quot;g&quot;,&quot;független&quot;,&quot;sony&quot;,&quot;xperia&quot;,&quot;z&quot;,&quot;tmobile&quot;,&quot;számitógép&quot;,&quot;pentium&quot;,&quot;es&quot;,&quot;farmer&quot;,&quot;ing&quot;,&quot;kabát&quot;,&quot;férfi&quot;,&quot;xxl&quot;,&quot;szakács&quot;,&quot;munkát&quot;,&quot;keres&quot;,&quot;pentax&quot;,&quot;mz&quot;,&quot;objektivek&quot;,&quot;alkatrészek&quot;,&quot;simson&quot;,&quot;dél&quot;,&quot;törökország&quot;,&quot;és&quot;,&quot;pamukkale&quot;,&quot;nap&quot;,&quot;repülővel&quot;,&quot;3&quot;,&quot;ben&quot;,&quot;touragoo&quot;,&quot;babakocsi&quot;,&quot;eladó&quot;,&quot;romantikus&quot;,&quot;könyvcsomag&quot;,&quot;alexandra&quot;,&quot;kiadó&quot;,&quot;chevrolet&quot;,&quot;blazer&quot;,&quot;benzines&quot;,&quot;alkatrészei&quot;,&quot;metzeler&quot;,&quot;motorgumi&quot;,&quot;bocikák&quot;,&quot;eladók&quot;,&quot;porcsalmán&quot;,&quot;samsung&quot;,&quot;i9250&quot;,&quot;galaxy&quot;,&quot;nexus&quot;,&quot;vadonatúj&quot;,&quot;kártya&quot;,&quot;weslo&quot;,&quot;energy&quot;,&quot;board&quot;,&quot;vibrációs&quot;,&quot;tréner&quot;,&quot;kia&quot;,&quot;ceed&quot;,&quot;sw&quot;,&quot;crdi&quot;,&quot;kombi&quot;,&quot;toyota&quot;,&quot;motoros&quot;,&quot;yamaha&quot;,&quot;mbk&quot;,&quot;fizz&quot;,&quot;t&quot;,&quot;pulóver&quot;,&quot;mexx&quot;,&quot;m&quot;,&quot;es&quot;,&quot;oklahomai&quot;,&quot;nemzeti&quot;,&quot;gárda&quot;,&quot;nagyméretű&quot;,&quot;komplett&quot;,&quot;zhu&quot;,&quot;zhu&quot;,&quot;pets&quot;,&quot;pálya&quot;,&quot;hörcsögge&quot;,&quot;herendi&quot;,&quot;táncoló&quot;,&quot;betyár&quot;,&quot;gyönyörü&quot;,&quot;csodás&quot;,&quot;alkotás&quot;,&quot;philips&quot;,&quot;avent&quot;,&quot;játszócumi&quot;,&quot;hó&quot;,&quot;db&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d531&quot;,&quot;dual&quot;,&quot;core&quot;,&quot;gb&quot;,&quot;ram&quot;,&quot;hónap&quot;,&quot;gari&quot;,&quot;menyecske&quot;,&quot;ruha&quot;,&quot;nagy&quot;,&quot;méretű&quot;,&quot;kalocsai&quot;,&quot;kézimunka&quot;,&quot;keretezve&quot;,&quot;arthur&quot;,&quot;c&quot;,&quot;clarke&quot;,&quot;randevú&quot;,&quot;a&quot;,&quot;rámával&quot;,&quot;biotorus&quot;,&quot;lt&quot;,&quot;eladó&quot;,&quot;hilti&quot;,&quot;sarokcsiszoló&quot;,&quot;lenovo&quot;,&quot;miix&quot;,&quot;szoptatós&quot;,&quot;párna&quot;,&quot;vegyes&quot;,&quot;videókazetta&quot;,&quot;gyüjtemény&quot;,&quot;csomag&quot;,&quot;fajtiszta&quot;,&quot;kaliforniai&quot;,&quot;választási&quot;,&quot;nyulak&quot;,&quot;canon&quot;,&quot;50d&quot;,&quot;canon&quot;,&quot;50mm&quot;,&quot;objektív&quot;,&quot;merci&quot;,&quot;eladó&quot;,&quot;fríss&quot;,&quot;müszakival&quot;,&quot;180x200&quot;,&quot;fenyő&quot;,&quot;franciaágy&quot;,&quot;ágybetét&quot;,&quot;george&quot;,&quot;peppás&quot;,&quot;ruha11&quot;,&quot;évesre&quot;,&quot;volkswagen&quot;,&quot;passat&quot;,&quot;tdi&quot;,&quot;variant&quot;,&quot;év&quot;,&quot;vizsga&quot;,&quot;50l&quot;,&quot;es&quot;,&quot;terrárium&quot;,&quot;eladó&quot;,&quot;kia&quot;,&quot;carens&quot;,&quot;családi&quot;,&quot;autó&quot;,&quot;eladó&quot;,&quot;volvo&quot;,&quot;v50&quot;,&quot;alkatrészek&quot;,&quot;ajtó&quot;,&quot;motor&quot;,&quot;lökhárító&quot;,&quot;futómű&quot;,&quot;michelin&quot;,&quot;alpin&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;r15&quot;,&quot;felnivel&quot;,&quot;színes&quot;,&quot;kávéskészlet&quot;,&quot;személyes&quot;,&quot;timberland&quot;,&quot;kisfiú&quot;,&quot;bakancs&quot;,&quot;eladó&quot;,&quot;munkát&quot;,&quot;keresek&quot;,&quot;szeptembertől&quot;,&quot;3gb&quot;,&quot;os&quot;,&quot;ddr5&quot;,&quot;zotac&quot;,&quot;típusú&quot;,&quot;videokártya&quot;,&quot;4db&quot;,&quot;bridgestone&quot;,&quot;r16&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;eladó&quot;,&quot;szombat&quot;,&quot;vasarnapra&quot;,&quot;erden&quot;,&quot;eladot&quot;,&quot;keresunk&quot;,&quot;eladó&quot;,&quot;új&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;ace3&quot;,&quot;ikea&quot;,&quot;leksvik&quot;,&quot;antik&quot;,&quot;pácolt&quot;,&quot;pad&quot;,&quot;215&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;pirelli&quot;,&quot;4&quot;,&quot;as&quot;,&quot;alufelni&quot;,&quot;garnitúra&quot;,&quot;r15&quot;,&quot;gumival&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;young&quot;,&quot;lenovo&quot;,&quot;thinkpad&quot;,&quot;x201&quot;,&quot;i5&quot;,&quot;intel&quot;,&quot;proci&quot;,&quot;gb&quot;,&quot;ram&quot;,&quot;eladó&quot;,&quot;cserélhető&quot;,&quot;es&quot;,&quot;lószálító&quot;,&quot;golf3&quot;,&quot;ablaktörlö&quot;,&quot;kapcsoló&quot;,&quot;keresek&quot;,&quot;fenyő&quot;,&quot;franciaágy&quot;,&quot;szalma&quot;,&quot;bála&quot;,&quot;eladó&quot;,&quot;gazdira&quot;,&quot;váró&quot;,&quot;kutyák&quot;,&quot;mosonmagyaróvár&quot;,&quot;és&quot;,&quot;környéke&quot;,&quot;2&quot;,&quot;asus&quot;,&quot;x551ma&quot;,&quot;sx066d&quot;,&quot;notebook&quot;,&quot;új&quot;,&quot;új&quot;,&quot;rezgő&quot;,&quot;pihenőszék&quot;,&quot;játékhíddal&quot;,&quot;dallamokkal&quot;,&quot;irha&quot;,&quot;bunda&quot;,&quot;akció&quot;,&quot;most39&quot;,&quot;990ft&quot;,&quot;helyett&quot;,&quot;csak19&quot;,&quot;990ft&quot;,&quot;mosógép&quot;,&quot;hoover&quot;,&quot;dyt&quot;,&quot;5kg&quot;,&quot;felültöltős&quot;,&quot;kazán&quot;,&quot;vegyes&quot;,&quot;tűzelésü&quot;,&quot;professzionális&quot;,&quot;kétkaros&quot;,&quot;kávégép&quot;,&quot;eladó&quot;,&quot;linz&quot;,&quot;kanapé&quot;,&quot;ággyá&quot;,&quot;alakítható&quot;,&quot;bonell&quot;,&quot;rugós&quot;,&quot;miele&quot;,&quot;német&quot;,&quot;fesőkategóriás&quot;,&quot;mosógép&quot;,&quot;seat&quot;,&quot;cordoba&quot;,&quot;mk2&quot;,&quot;bal&quot;,&quot;első&quot;,&quot;sárvédő&quot;,&quot;vw&quot;,&quot;golf&quot;,&quot;gti&quot;,&quot;n&quot;,&quot;lévő&quot;,&quot;alufelni&quot;,&quot;netgear&quot;,&quot;wg311t&quot;,&quot;autófelvásárlás&quot;,&quot;a&quot;,&quot;legmagasabb&quot;,&quot;eurotax&quot;,&quot;áron&quot;,&quot;játékos&quot;,&quot;középméretű&quot;,&quot;szuka&quot;,&quot;kölyök&quot;,&quot;kutyus&quot;,&quot;földieper&quot;,&quot;szamóca&quot;,&quot;palánta&quot;,&quot;alcatel&quot;,&quot;ot&quot;,&quot;ultra&quot;,&quot;csere&quot;,&quot;is&quot;,&quot;renault&quot;,&quot;clio&quot;,&quot;váltó&quot;,&quot;alkatrésznek&quot;,&quot;ingatlanközvetítőket&quot;,&quot;keresünk&quot;,&quot;új&quot;,&quot;graf&quot;,&quot;es&quot;,&quot;hokikori&quot;,&quot;es&quot;,&quot;legújabb&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;i5&quot;,&quot;8gb&quot;,&quot;128ssd&quot;,&quot;generic&quot;,&quot;xor&quot;,&quot;4t&quot;,&quot;km&quot;,&quot;új&quot;,&quot;nagy&quot;,&quot;méretű&quot;,&quot;eredeti&quot;,&quot;saxoo&quot;,&quot;napszemüvegtok&quot;,&quot;r14c&quot;,&quot;új&quot;,&quot;gumik&quot;,&quot;yokohama&quot;,&quot;y354&quot;,&quot;made&quot;,&quot;in&quot;,&quot;japan&quot;,&quot;sony&quot;,&quot;microhifi&quot;,&quot;hangfalszett&quot;,&quot;beltéri&quot;,&quot;ajtó&quot;,&quot;75x210&quot;,&quot;naturtanya&quot;,&quot;hungary&quot;,&quot;kft&quot;,&quot;marketinges&quot;,&quot;kollégát&quot;,&quot;keres&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;s&quot;,&quot;advance&quot;,&quot;új&quot;,&quot;trónbili&quot;,&quot;lezáródó&quot;,&quot;fededes&quot;,&quot;kivehető&quot;,&quot;betéttel&quot;,&quot;lépcsőző&quot;,&quot;gép&quot;,&quot;holzmann&quot;,&quot;merti&quot;,&quot;rusztikus&quot;,&quot;komod&quot;,&quot;es&quot;,&quot;fali&quot;,&quot;szekreny&quot;,&quot;eladó&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;b&quot;,&quot;cdx&quot;,&quot;felszerelt&quot;,&quot;megkimélt&quot;,&quot;takarító&quot;,&quot;munkatársakat&quot;,&quot;keresünk&quot;,&quot;szecessziós&quot;,&quot;nőalak&quot;,&quot;szobor&quot;,&quot;avent&quot;,&quot;cumi&quot;,&quot;munkat&quot;,&quot;keresek&quot;,&quot;csalad&quot;,&quot;fenntartas&quot;,&quot;celbol&quot;,&quot;eladó&quot;,&quot;nokia&quot;,&quot;slide&quot;,&quot;balatonboglári&quot;,&quot;üzletbe&quot;,&quot;nemdohányzó&quot;,&quot;eladót&quot;,&quot;keresünk&quot;,&quot;összecsukható&quot;,&quot;babakocsi&quot;,&quot;hévízen&quot;,&quot;eladó&quot;,&quot;színes&quot;,&quot;törpe&quot;,&quot;nyúl&quot;,&quot;babakocsi&quot;,&quot;tartozékokal&quot;,&quot;oxigén&quot;,&quot;és&quot;,&quot;diszu&quot;,&quot;palackok&quot;,&quot;mosógépmotor&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;hasas&quot;,&quot;sportpóni&quot;,&quot;kanca&quot;,&quot;electrolux&quot;,&quot;csomagolt&quot;,&quot;vastagfalú&quot;,&quot;180l&quot;,&quot;fagyasztóláda&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;ic2d&quot;,&quot;4gb&quot;,&quot;320gb&quot;,&quot;hdd&quot;,&quot;hun&quot;,&quot;lador&quot;,&quot;swiss&quot;,&quot;zenélő&quot;,&quot;söröskorsók&quot;,&quot;bejelentett&quot;,&quot;esztergályos&quot;,&quot;főállás&quot;,&quot;kiskunfélegyházán&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;t&quot;,&quot;mobile&quot;,&quot;black&quot;,&quot;apple&quot;,&quot;iphone4&quot;,&quot;16gb&quot;,&quot;hajtogatott&quot;,&quot;papírtörölköző&quot;,&quot;tartó&quot;,&quot;pizsirugik&quot;,&quot;hós&quot;,&quot;miele&quot;,&quot;cva&quot;,&quot;beépíthető&quot;,&quot;kávéfőző&quot;,&quot;bmw&quot;,&quot;x&quot;,&quot;drive&quot;,&quot;skoda&quot;,&quot;felicia&quot;,&quot;tetőcsomagtartó&quot;,&quot;új&quot;,&quot;törölköző&quot;,&quot;12db&quot;,&quot;cs&quot;,&quot;ajándék&quot;,&quot;ingyen&quot;,&quot;háztól&quot;,&quot;házig&quot;,&quot;üzlethelyiség&quot;,&quot;m2&quot;,&quot;sinko&quot;,&quot;zsolnay&quot;,&quot;kutyával&quot;,&quot;játszó&quot;,&quot;fiú&quot;,&quot;állatos&quot;,&quot;pecsételő&quot;,&quot;gyerekeknek&quot;,&quot;suzuki&quot;,&quot;sv&quot;,&quot;rendszámos&quot;,&quot;eladó&quot;,&quot;alkalmi&quot;,&quot;vétel&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d505&quot;,&quot;centrino&quot;,&quot;ghz&quot;,&quot;1&quot;,&quot;újszerű&quot;,&quot;fujifilm&quot;,&quot;s4000&quot;,&quot;hd&quot;,&quot;bridge&quot;,&quot;fényképezőgép&quot;,&quot;canon&quot;,&quot;eos&quot;,&quot;1000d&quot;,&quot;fényképezőgép&quot;,&quot;váz&quot;,&quot;hó&quot;,&quot;garancia&quot;,&quot;shamballa&quot;,&quot;csilli&quot;,&quot;villi&quot;,&quot;karkötő&quot;,&quot;új&quot;,&quot;új&quot;,&quot;baby&quot;,&quot;design&quot;,&quot;sprint&quot;,&quot;plus&quot;,&quot;multifunkciós&quot;,&quot;babakocsi&quot;,&quot;traktorhoz&quot;,&quot;fejes&quot;,&quot;eke&quot;,&quot;olcson&quot;,&quot;elado&quot;,&quot;ibm&quot;,&quot;lenovo&quot;,&quot;t400&quot;,&quot;thinkpad&quot;,&quot;nagyon&quot;,&quot;szép&quot;,&quot;újszerű&quot;,&quot;nokia&quot;,&quot;x2&quot;,&quot;telefon&quot;,&quot;hónapos&quot;,&quot;eladó&quot;,&quot;garanciás&quot;,&quot;bukósisak&quot;,&quot;sport&quot;,&quot;sony&quot;,&quot;psp&quot;,&quot;eladó&quot;,&quot;h&quot;,&quot;m&quot;,&quot;es&quot;,&quot;női&quot;,&quot;farmer&quot;,&quot;miniszoknya&quot;,&quot;zhu&quot;,&quot;zhu&quot;,&quot;pets&quot;,&quot;repülőtér&quot;,&quot;szett&quot;,&quot;új&quot;,&quot;intel&quot;,&quot;pentium&quot;,&quot;06ghz&quot;,&quot;proci&quot;,&quot;mam&quot;,&quot;etetőcumi&quot;,&quot;bontatlan&quot;,&quot;szervízvezető&quot;,&quot;barjavel&quot;,&quot;a&quot;,&quot;nagy&quot;,&quot;titok&quot;,&quot;makulatlan&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;ace&quot;,&quot;plus&quot;,&quot;next&quot;,&quot;kabát&quot;,&quot;éves&quot;,&quot;méret&quot;,&quot;pihe&quot;,&quot;puha&quot;,&quot;ferrobull&quot;,&quot;borjúóvoda&quot;,&quot;a&quot;,&quot;maximális&quot;,&quot;súlygyarapodásért&quot;,&quot;raf&quot;,&quot;pol&quot;,&quot;mózeskosaras&quot;,&quot;babakocsi&quot;,&quot;fix&quot;,&quot;jutalék&quot;,&quot;ingatlanközvetítői&quot;,&quot;állás&quot;,&quot;műszaki&quot;,&quot;előkészítő&quot;,&quot;irodai&quot;,&quot;munkatárs&quot;,&quot;renault&quot;,&quot;megane&quot;,&quot;scenic&quot;,&quot;kormánymű&quot;,&quot;pannon&quot;,&quot;fehér&quot;,&quot;baknyúl&quot;,&quot;call&quot;,&quot;of&quot;,&quot;duty&quot;,&quot;world&quot;,&quot;at&quot;,&quot;war&quot;,&quot;playstation&quot;,&quot;játék&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;literes&quot;,&quot;olajos&quot;,&quot;kompresszor&quot;,&quot;élelmiszer&quot;,&quot;ipari&quot;,&quot;sokkoló&quot;,&quot;kőművest&quot;,&quot;keresek&quot;,&quot;azonnali&quot;,&quot;munkakezdéssel&quot;,&quot;charles&quot;,&quot;vögele&quot;,&quot;kardigán&quot;,&quot;playstation&quot;,&quot;1&quot;,&quot;új&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;i5&quot;,&quot;4gb&quot;,&quot;128ssd&quot;,&quot;hun&quot;,&quot;műirha&quot;,&quot;bunda&quot;,&quot;női&quot;,&quot;kabát&quot;,&quot;iveco&quot;,&quot;deutz&quot;,&quot;terepváltó&quot;,&quot;jó&quot;,&quot;állapotban&quot;,&quot;converse&quot;,&quot;jack&quot;,&quot;purcel&quot;,&quot;cipő&quot;,&quot;es&quot;,&quot;gilera&quot;,&quot;mx1&quot;,&quot;8900km&quot;,&quot;ft&quot;,&quot;magyar&quot;,&quot;papírok&quot;,&quot;kis&quot;,&quot;bálás&quot;,&quot;szalma&quot;,&quot;eladó&quot;,&quot;lorelli&quot;,&quot;maranello&quot;,&quot;plus&quot;,&quot;autós&quot;,&quot;gyerekülés&quot;,&quot;kg&quot;,&quot;asus&quot;,&quot;am2&quot;,&quot;am3&quot;,&quot;alaplap&quot;,&quot;proci&quot;,&quot;ram&quot;,&quot;eladó&quot;,&quot;philips&quot;,&quot;senseo&quot;,&quot;kávéfőző&quot;,&quot;eladó&quot;,&quot;2&quot;,&quot;literes&quot;,&quot;fonott&quot;,&quot;demizson&quot;,&quot;bontókalapács&quot;,&quot;egészséges&quot;,&quot;rozella&quot;,&quot;pár&quot;,&quot;eladó&quot;,&quot;whirlpool&quot;,&quot;awt&quot;,&quot;automata&quot;,&quot;mosógép&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;sportbabakocsi&quot;,&quot;vendéglátói&quot;,&quot;munkát&quot;,&quot;keresek&quot;,&quot;kerti&quot;,&quot;pad&quot;,&quot;lóca&quot;,&quot;motor&quot;,&quot;csonak&quot;,&quot;mercedes&quot;,&quot;sprinter&quot;,&quot;vito&quot;,&quot;motorok&quot;,&quot;eladok&quot;,&quot;26&quot;,&quot;os&quot;,&quot;összteleszkópos&quot;,&quot;mtb&quot;,&quot;kerékpár&quot;,&quot;szunyog&quot;,&quot;riasztó&quot;,&quot;növény&quot;,&quot;nagy&quot;,&quot;méretben&quot;,&quot;eladó&quot;,&quot;kiegészítők&quot;,&quot;magasnyomású&quot;,&quot;mosóhoz&quot;,&quot;chrysler&quot;,&quot;stratus&quot;,&quot;le&quot;,&quot;kitalálós&quot;,&quot;játék&quot;,&quot;educa&quot;,&quot;sofőrt&quot;,&quot;felveszünk&quot;,&quot;kisteherautóra&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;i7&quot;,&quot;16gb&quot;,&quot;ram&quot;,&quot;ssd&quot;,&quot;bmw&quot;,&quot;e39&quot;,&quot;ködlámpapár&quot;,&quot;gyári&quot;,&quot;hibátlan&quot;,&quot;tefal&quot;,&quot;pro&quot;,&quot;express&quot;,&quot;gőzállomásos&quot;,&quot;vasaló&quot;,&quot;bavaria&quot;,&quot;kávéscsésze&quot;,&quot;alátét&quot;,&quot;2011&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;quad&quot;,&quot;i7&quot;,&quot;ghz&quot;,&quot;8gb&quot;,&quot;magyar&quot;,&quot;búza&quot;,&quot;szalma&quot;,&quot;eladó&quot;,&quot;operátor&quot;,&quot;tárgylemez&quot;,&quot;készítő&quot;,&quot;németjuhász&quot;,&quot;szuka&quot;,&quot;örökbe&quot;,&quot;macbook&quot;,&quot;air&quot;,&quot;ghz&quot;,&quot;intelcore&quot;,&quot;i7&quot;,&quot;256ssd&quot;,&quot;angelo&quot;,&quot;litrico&quot;,&quot;férfi&quot;,&quot;ing&quot;,&quot;nöi&quot;,&quot;kardigán&quot;,&quot;accu&quot;,&quot;chek&quot;,&quot;vércukor&quot;,&quot;tesztcsík&quot;,&quot;chipolino&quot;,&quot;sport&quot;,&quot;babakocsi&quot;,&quot;2&quot;,&quot;db&quot;,&quot;s&quot;,&quot;es&quot;,&quot;bizsu&quot;,&quot;gyűrű&quot;,&quot;1&quot;,&quot;4es&quot;,&quot;tanuló&quot;,&quot;kishegedú&quot;,&quot;eladó&quot;,&quot;személy&quot;,&quot;és&quot;,&quot;vagyonőrök&quot;,&quot;részére&quot;,&quot;azonnali&quot;,&quot;munka&quot;,&quot;kecske&quot;,&quot;nöstény&quot;,&quot;örökbe&quot;,&quot;fogadható&quot;,&quot;kutya&quot;,&quot;bogárkám&quot;,&quot;beltéri&quot;,&quot;ajtók&quot;,&quot;eladók&quot;,&quot;puli&quot;,&quot;kan&quot;,&quot;kölyök&quot;,&quot;eladó&quot;,&quot;samsung&quot;,&quot;s5620&quot;,&quot;monte&quot;,&quot;airoh&quot;,&quot;bukósisak&quot;,&quot;beépített&quot;,&quot;napszemüveggel&quot;,&quot;kondigép&quot;,&quot;sok&quot;,&quot;funkciós&quot;,&quot;antik&quot;,&quot;képkeret&quot;,&quot;eladó&quot;,&quot;disney&quot;,&quot;mintás&quot;,&quot;nyálazó&quot;,&quot;új&quot;,&quot;delongy&quot;,&quot;autómata&quot;,&quot;kávéfőző&quot;,&quot;olcsón&quot;,&quot;codegen&quot;,&quot;grey&quot;,&quot;vagyonőröket&quot;,&quot;keresünk&quot;,&quot;haflingi&quot;,&quot;herélt&quot;,&quot;eladó&quot;,&quot;baba&quot;,&quot;játékok&quot;,&quot;zanussi&quot;,&quot;lehel&quot;,&quot;hütőláda&quot;,&quot;eladó&quot;,&quot;panasonic&quot;,&quot;tv&quot;,&quot;hz&quot;,&quot;renault&quot;,&quot;clio&quot;,&quot;rn&quot;,&quot;lispeszentadorjánban&quot;,&quot;1338m2&quot;,&quot;telek&quot;,&quot;eladó&quot;,&quot;michelin&quot;,&quot;alpin&quot;,&quot;téligumi&quot;,&quot;garnitúra&quot;,&quot;r15&quot;,&quot;sony&quot;,&quot;kdl&quot;,&quot;48w585b&quot;,&quot;led&quot;,&quot;tv&quot;,&quot;electrolux&quot;,&quot;no&quot;,&quot;frost&quot;,&quot;os&quot;,&quot;a&quot;,&quot;fagyasztószekrény&quot;,&quot;alig&quot;,&quot;használt&quot;,&quot;babakocsi&quot;,&quot;madrid&quot;,&quot;személyes&quot;,&quot;ágyfunkciós&quot;,&quot;sarokgarnitúra&quot;,&quot;madrid&quot;,&quot;személyes&quot;,&quot;ágyfunkciós&quot;,&quot;sarokgarnitúra&quot;,&quot;eladó&quot;,&quot;nordica&quot;,&quot;sícipő&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;etetőszék&quot;,&quot;eladó&quot;,&quot;gyönyörű&quot;,&quot;türkinit&quot;,&quot;fülbevaló&quot;,&quot;egyedi&quot;,&quot;kézzel&quot;,&quot;készít&quot;,&quot;audi&quot;,&quot;gyári&quot;,&quot;alufelnigarnitúra&quot;,&quot;szép&quot;,&quot;állapotban&quot;,&quot;eladó&quot;,&quot;andante&quot;,&quot;novalife&quot;,&quot;ülőgarnitúra&quot;,&quot;fogyatékkal&quot;,&quot;élő&quot;,&quot;értékesítési&quot;,&quot;menedzsert&quot;,&quot;felveszünk&quot;,&quot;puskás&quot;,&quot;emlék&quot;,&quot;érme&quot;,&quot;ezüst&quot;,&quot;chipolino&quot;,&quot;dakota&quot;,&quot;használt&quot;,&quot;babakocsi&quot;,&quot;baba&quot;,&quot;overál&quot;,&quot;polár&quot;,&quot;béléssel&quot;,&quot;hónapos&quot;,&quot;korig&quot;,&quot;fujitsusiemens&quot;,&quot;cy23&quot;,&quot;laptop&quot;,&quot;miniparfüm&quot;,&quot;gyűjteményből&quot;,&quot;naf&quot;,&quot;naf&quot;,&quot;fossil&quot;,&quot;me1025&quot;,&quot;eredeti&quot;,&quot;karóra&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;eladó&quot;}; 

// This is an random element i&apos;m going to extract from the array 
Random rand = new Random();
int min = 50;
int max = 52;

int contentCount = rand.nextInt(max - min) + min;
int titleCount = rand.nextInt(2) + 8;

// This is just for debugging purpose, initialization of test plan variable 
//vars.put(&quot;randomElement&quot;, next.toString()); 

//vars.put(&quot;randomword&quot;, args[randomElement] );

int next;

String text = args[rand.nextInt(args.length)];
for(int i=0; i&lt;titleCount; i++) {
   next = rand.nextInt(args.length);
   text = text + &quot; &quot; + args[next];
}
vars.put(&quot;randomTitle&quot;, text );

text = args[rand.nextInt(args.length)];
for(int i=0; i&lt;contentCount; i++) {
   next = rand.nextInt(args.length);
   text = text + &quot; &quot; + args[next];
}
vars.put(&quot;randomContent&quot;, text );</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Get" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Update" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: ${documentId},&#xd;
    &quot;title&quot;: &quot;Test Modification&quot;,&#xd;
    &quot;desc&quot;: &quot;Example Modified Product Description&quot;&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
        <stringProp name="HTTPSampler.method">PUT</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Delete" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents/${documentId}</stringProp>
        <stringProp name="HTTPSampler.method">DELETE</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;example tag 1&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.util.Random;
// array of Strings 
String[] args={&quot;francia&quot;,&quot;idegenlégiós&quot;,&quot;kék&quot;,&quot;öv&quot;,&quot;táska&quot;,&quot;szett&quot;,&quot;db&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;forintért&quot;,&quot;zepter&quot;,&quot;edénykészelet&quot;,&quot;db&quot;,&quot;os&quot;,&quot;fém&quot;,&quot;tárolódoboz&quot;,&quot;eladó&quot;,&quot;pécsett&quot;,&quot;m2&quot;,&quot;körüli&quot;,&quot;házat&quot;,&quot;vennék&quot;,&quot;málylibák&quot;,&quot;eladók&quot;,&quot;4500&quot;,&quot;2x90&quot;,&quot;darabos&quot;,&quot;üveggolyó&quot;,&quot;készlet&quot;,&quot;kék&quot;,&quot;szürke&quot;,&quot;ford&quot;,&quot;bőr&quot;,&quot;kulcstartó&quot;,&quot;új&quot;,&quot;mini&quot;,&quot;gép&quot;,&quot;eladó&quot;,&quot;cnc&quot;,&quot;épített&quot;,&quot;eladó&quot;,&quot;nyílászárók&quot;,&quot;szigetelése&quot;,&quot;5&quot;,&quot;db&quot;,&quot;új&quot;,&quot;gumis&quot;,&quot;hajpánt&quot;,&quot;felső&quot;,&quot;csomag&quot;,&quot;os&quot;,&quot;viz&quot;,&quot;szivattyú&quot;,&quot;övtáska&quot;,&quot;távcső&quot;,&quot;tájoló&quot;,&quot;használt&quot;,&quot;rovarcsapda&quot;,&quot;ovis&quot;,&quot;ágyhoz&quot;,&quot;lepedő&quot;,&quot;1&quot;,&quot;sz&quot;,&quot;bútorozott&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;uránvárosban&quot;,&quot;szoba&quot;,&quot;kiadó&quot;,&quot;konyha&quot;,&quot;használattal&quot;,&quot;peg&quot;,&quot;preo&quot;,&quot;duo&quot;,&quot;fix&quot;,&quot;rendszerű&quot;,&quot;gyermekülés&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;gyermek&quot;,&quot;jelmez&quot;,&quot;orion&quot;,&quot;színes&quot;,&quot;tv&quot;,&quot;4&quot;,&quot;db&quot;,&quot;nike&quot;,&quot;fishbone&quot;,&quot;ny&quot;,&quot;férfi&quot;,&quot;póló&quot;,&quot;egyben&quot;,&quot;új&quot;,&quot;címkés&quot;,&quot;babakocsi&quot;,&quot;eladó&quot;,&quot;tatabányán&quot;,&quot;xii&quot;,&quot;zugligeti&quot;,&quot;erkélyes&quot;,&quot;lakás&quot;,&quot;akciós&quot;,&quot;áron&quot;,&quot;eladó&quot;,&quot;acer&quot;,&quot;emachines&quot;,&quot;e720&quot;,&quot;laptop&quot;,&quot;vadháló&quot;,&quot;drótfonat&quot;,&quot;kerítés&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;c&quot;,&quot;kanyar&quot;,&quot;követős&quot;,&quot;xenon&quot;,&quot;fényszoró&quot;,&quot;görgey&quot;,&quot;u&quot;,&quot;étkezőkonyhás&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;28as&quot;,&quot;fehér&quot;,&quot;szandál&quot;,&quot;új&quot;,&quot;gyermek&quot;,&quot;trikók&quot;,&quot;és&quot;,&quot;next&quot;,&quot;kislány&quot;,&quot;ruha&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;konyhai&quot;,&quot;sroküllö&quot;,&quot;asztala&quot;,&quot;szétnyitható&quot;,&quot;2&quot;,&quot;5m&quot;,&quot;magas&quot;,&quot;yukka&quot;,&quot;nokia&quot;,&quot;telenor&quot;,&quot;függő&quot;,&quot;fehér&quot;,&quot;szinben&quot;,&quot;aprilia&quot;,&quot;scarabeo&quot;,&quot;ütemű&quot;,&quot;eladó&quot;,&quot;mankó&quot;,&quot;kerék&quot;,&quot;col&quot;,&quot;os&quot;,&quot;eladó&quot;,&quot;lakás&quot;,&quot;a&quot;,&quot;fazekas&quot;,&quot;mihály&quot;,&quot;utcában&quot;,&quot;nagyobb&quot;,&quot;méretű&quot;,&quot;lány&quot;,&quot;ruhacsomag&quot;,&quot;fronius&quot;,&quot;ig&quot;,&quot;plus&quot;,&quot;v&quot;,&quot;inverter&quot;,&quot;barbis&quot;,&quot;térd&quot;,&quot;könyök&quot;,&quot;alkar&quot;,&quot;védő&quot;,&quot;elado&quot;,&quot;női&quot;,&quot;pávers&quot;,&quot;comfort&quot;,&quot;valodi&quot;,&quot;börcipö&quot;,&quot;2&quot;,&quot;db&quot;,&quot;r15&quot;,&quot;toyo&quot;,&quot;proxes&quot;,&quot;cf1&quot;,&quot;nyári&quot;,&quot;régi&quot;,&quot;kovácssatu&quot;,&quot;grace&quot;,&quot;női&quot;,&quot;válltáska&quot;,&quot;neonato&quot;,&quot;piuma&quot;,&quot;68&quot;,&quot;as&quot;,&quot;bébi&quot;,&quot;szabadidő&quot;,&quot;szett&quot;,&quot;mondeo&quot;,&quot;vezető&quot;,&quot;ülés&quot;,&quot;debrecenben&quot;,&quot;a&quot;,&quot;kishegyesi&quot;,&quot;úton&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;elado&quot;,&quot;férfi&quot;,&quot;m&quot;,&quot;es&quot;,&quot;dzseki&quot;,&quot;vadonat&quot;,&quot;uj&quot;,&quot;körfűrész&quot;,&quot;eladó&quot;,&quot;matt&quot;,&quot;üveg&quot;,&quot;kihúzhatós&quot;,&quot;számítógép&quot;,&quot;asztal&quot;,&quot;eladó&quot;,&quot;sicko&quot;,&quot;szürke&quot;,&quot;farmer&quot;,&quot;férfi&quot;,&quot;farmer&quot;,&quot;nadrág&quot;,&quot;86&quot;,&quot;os&quot;,&quot;melegítő&quot;,&quot;alsó&quot;,&quot;unisex&quot;,&quot;sürgősen&quot;,&quot;eladó&quot;,&quot;jó&quot;,&quot;állapotban&quot;,&quot;lévő&quot;,&quot;gitárok&quot;,&quot;pécsett&quot;,&quot;főútvonalon&quot;,&quot;éve&quot;,&quot;működő&quot;,&quot;vendéglő&quot;,&quot;kiadó&quot;,&quot;építőipari&quot;,&quot;szakközépiskolába&quot;,&quot;szükséges&quot;,&quot;tankönyvek&quot;,&quot;új&quot;,&quot;lux&quot;,&quot;uv&quot;,&quot;szűrős&quot;,&quot;babakocsi&quot;,&quot;napernyő&quot;,&quot;babakocsira&quot;,&quot;új&quot;,&quot;es&quot;,&quot;golddigga&quot;,&quot;vízálló&quot;,&quot;bakancs&quot;,&quot;vario&quot;,&quot;lux&quot;,&quot;maszirozógép&quot;,&quot;140&quot;,&quot;es&quot;,&quot;trambulin&quot;,&quot;fényújság&quot;,&quot;zöld&quot;,&quot;160x32&quot;,&quot;cm&quot;,&quot;fényreklám&quot;,&quot;új&quot;,&quot;szépséghibás&quot;,&quot;indesit&quot;,&quot;fagyasztó&quot;,&quot;garival&quot;,&quot;eladó&quot;,&quot;különleges&quot;,&quot;os&quot;,&quot;méretű&quot;,&quot;szoknyák&quot;,&quot;xbox&quot;,&quot;elite&quot;,&quot;dolce&quot;,&quot;gabbana&quot;,&quot;fekete&quot;,&quot;nadrág&quot;,&quot;anmar&quot;,&quot;hilux&quot;,&quot;3in1&quot;,&quot;multifunkciós&quot;,&quot;babakocsi&quot;,&quot;sugarbird&quot;,&quot;alsó&quot;,&quot;eladó&quot;,&quot;színben&quot;,&quot;új&quot;,&quot;kikstar&quot;,&quot;es&quot;,&quot;lány&quot;,&quot;farmer&quot;,&quot;dombostanyán&quot;,&quot;nm&quot;,&quot;es&quot;,&quot;ház&quot;,&quot;eladó&quot;,&quot;városmajori&quot;,&quot;lakás&quot;,&quot;matróz&quot;,&quot;blúz&quot;,&quot;h&quot;,&quot;m&quot;,&quot;kantáros&quot;,&quot;rövidnadrág&quot;,&quot;es&quot;,&quot;hónaposra&quot;,&quot;eladó&quot;,&quot;canon&quot;,&quot;bg&quot;,&quot;e13&quot;,&quot;portrémarkolat&quot;,&quot;opel&quot;,&quot;g&quot;,&quot;astra&quot;,&quot;x17dtl&quot;,&quot;motor&quot;,&quot;levis&quot;,&quot;es&quot;,&quot;farmer&quot;,&quot;es&quot;,&quot;mecman&quot;,&quot;pneumatikus&quot;,&quot;munkahenger&quot;,&quot;eladó&quot;,&quot;permetező&quot;,&quot;szár&quot;,&quot;háti&quot;,&quot;permetezőhöz&quot;,&quot;sony&quot;,&quot;minihifi&quot;,&quot;mp3&quot;,&quot;lejátszással&quot;,&quot;tökéletes&quot;,&quot;és&quot;,&quot;hibátl&quot;,&quot;angol&quot;,&quot;német&quot;,&quot;nyelvoktatás&quot;,&quot;ft&quot;,&quot;óra&quot;,&quot;számítógépasztal&quot;,&quot;íróasztal&quot;,&quot;asztal&quot;,&quot;klaviatúratartó&quot;,&quot;hajtó&quot;,&quot;kutya&quot;,&quot;eladó&quot;,&quot;üveg&quot;,&quot;csillár&quot;,&quot;eladó&quot;,&quot;magyar&quot;,&quot;tarka&quot;,&quot;tehén&quot;,&quot;bosh&quot;,&quot;mosógép&quot;,&quot;garanciával&quot;,&quot;vw&quot;,&quot;bora&quot;,&quot;16v&quot;,&quot;ahw&quot;,&quot;hengerfej&quot;,&quot;mercedes&quot;,&quot;benz&quot;,&quot;309d&quot;,&quot;tonnás&quot;,&quot;teherbirású&quot;,&quot;eladó&quot;,&quot;acer&quot;,&quot;aspire&quot;,&quot;magos&quot;,&quot;laptop&quot;,&quot;art&quot;,&quot;deco&quot;,&quot;bútorcsalád&quot;,&quot;egyben&quot;,&quot;vagy&quot;,&quot;darabonként&quot;,&quot;eladó&quot;,&quot;kovo&quot;,&quot;fiú&quot;,&quot;csizma&quot;,&quot;as&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;rendkívüli&quot;,&quot;áron&quot;,&quot;eladó&quot;,&quot;csepeli&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;fekete&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;p4&quot;,&quot;es&quot;,&quot;amd&quot;,&quot;konfiguráció&quot;,&quot;eladó&quot;,&quot;terasz&quot;,&quot;lehetőséges&quot;,&quot;üzlet&quot;,&quot;a&quot;,&quot;délinél&quot;,&quot;bering&quot;,&quot;motoros&quot;,&quot;ruha&quot;,&quot;keeway&quot;,&quot;huricane&quot;,&quot;élelmiszer&quot;,&quot;üzletbe&quot;,&quot;szakképzett&quot;,&quot;eladot&quot;,&quot;keresek&quot;,&quot;ravensburger&quot;,&quot;scotland&quot;,&quot;yard&quot;,&quot;társasjáték&quot;,&quot;női&quot;,&quot;40es&quot;,&quot;bőr&quot;,&quot;alkalmi&quot;,&quot;sebastiano&quot;,&quot;szandál&quot;,&quot;nagyméretű&quot;,&quot;kép&quot;,&quot;fekete&quot;,&quot;liliomokkal&quot;,&quot;debrecen&quot;,&quot;eladó&quot;,&quot;m2&quot;,&quot;es&quot;,&quot;családi&quot;,&quot;ház&quot;,&quot;lányka&quot;,&quot;fekete&quot;,&quot;hosszú&quot;,&quot;ujjú&quot;,&quot;debrecenben&quot;,&quot;a&quot;,&quot;kishegyesi&quot;,&quot;úton&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;msi&quot;,&quot;komplett&quot;,&quot;asztali&quot;,&quot;számítógép&quot;,&quot;eladó&quot;,&quot;nyíregyházán&quot;,&quot;náci&quot;,&quot;pecsétgyűrű&quot;,&quot;kitűző&quot;,&quot;övcsat&quot;,&quot;piros&quot;,&quot;kapucnis&quot;,&quot;pulóver&quot;,&quot;xl&quot;,&quot;angol&quot;,&quot;magánóra&quot;,&quot;ingyen&quot;,&quot;találkozó&quot;,&quot;szintfelmérés&quot;,&quot;pöttyös&quot;,&quot;könyv&quot;,&quot;fehér&quot;,&quot;klára&quot;,&quot;bezzeg&quot;,&quot;az&quot;,&quot;én&quot;,&quot;időmben&quot;,&quot;alkalmi&quot;,&quot;hosszú&quot;,&quot;ruha&quot;,&quot;samsung&quot;,&quot;np300&quot;,&quot;notebook&quot;,&quot;i5&quot;,&quot;posta&quot;,&quot;ok&quot;,&quot;agrár&quot;,&quot;egyetemhez&quot;,&quot;közeli&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;sata&quot;,&quot;hdd&quot;,&quot;750gb&quot;,&quot;rönkhasító&quot;,&quot;fahasító&quot;,&quot;eladó&quot;,&quot;azonnali&quot;,&quot;fizetés&quot;,&quot;az&quot;,&quot;elvégzett&quot;,&quot;munka&quot;,&quot;után&quot;,&quot;kludi&quot;,&quot;zuhany&quot;,&quot;csaptelep&quot;,&quot;nike&quot;,&quot;téli&quot;,&quot;kabát&quot;,&quot;möbelix&quot;,&quot;vaságy&quot;,&quot;keret&quot;,&quot;éjjeli&quot;,&quot;szekrény&quot;,&quot;batman&quot;,&quot;képregénycsomag&quot;,&quot;eladó&quot;,&quot;macbook&quot;,&quot;air&quot;,&quot;magyar&quot;,&quot;garanciás&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;4&quot;,&quot;lakkozott&quot;,&quot;frissen&quot;,&quot;kárpitozott&quot;,&quot;fa&quot;,&quot;székek&quot;,&quot;világos&quot;,&quot;kétszobás&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;kisállat&quot;,&quot;ketrec&quot;,&quot;samsung&quot;,&quot;cm&quot;,&quot;tv&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;mini&quot;,&quot;okostelefon&quot;,&quot;gt&quot;,&quot;s5570&quot;,&quot;möller&quot;,&quot;db&quot;,&quot;dugókulcs&quot;,&quot;krova&quot;,&quot;szerszámkészlet&quot;,&quot;igényes&quot;,&quot;kisfiú&quot;,&quot;ruhacsomag&quot;,&quot;92&quot;,&quot;74&quot;,&quot;es&quot;,&quot;fiú&quot;,&quot;ing&quot;,&quot;rugik&quot;,&quot;lánygyerek&quot;,&quot;cipők&quot;,&quot;hegesztő&quot;,&quot;trafó&quot;,&quot;néma&quot;,&quot;kacsák&quot;,&quot;női&quot;,&quot;irha&quot;,&quot;mellény&quot;,&quot;q24&quot;,&quot;fullhd&quot;,&quot;monitor&quot;,&quot;fortschritt&quot;,&quot;önjáró&quot;,&quot;kaszálógép&quot;,&quot;110&quot;,&quot;es&quot;,&quot;cherokee&quot;,&quot;póló&quot;,&quot;szoknya&quot;,&quot;csillogó&quot;,&quot;szivecskés&quot;,&quot;zte&quot;,&quot;skate&quot;,&quot;android&quot;,&quot;okos&quot;,&quot;mobiltelefon&quot;,&quot;eladó&quot;,&quot;ekrü&quot;,&quot;színú&quot;,&quot;alkalmi&quot;,&quot;cipő&quot;,&quot;os&quot;,&quot;maradj&quot;,&quot;talpon&quot;,&quot;társasjáték&quot;,&quot;ikeás&quot;,&quot;rattan&quot;,&quot;franciaágy&quot;,&quot;180x200cm&quot;,&quot;matrac&quot;,&quot;eladó&quot;,&quot;újszerű&quot;,&quot;siemens&quot;,&quot;kg36vx50&quot;,&quot;alul&quot;,&quot;fagyasztós&quot;,&quot;hű&quot;,&quot;gyönyörű&quot;,&quot;szép&quot;,&quot;gyári&quot;,&quot;független&quot;,&quot;fehér&quot;,&quot;iphone&quot;,&quot;jó&quot;,&quot;állapotú&quot;,&quot;mercedes&quot;,&quot;benz&quot;,&quot;alkatrészek&quot;,&quot;gyári&quot;,&quot;hp&quot;,&quot;p4&quot;,&quot;pc&quot;,&quot;lcd&quot;,&quot;kompletten&quot;,&quot;jó&quot;,&quot;állapotú&quot;,&quot;es&quot;,&quot;babetta&quot;,&quot;eladó&quot;,&quot;hideg&quot;,&quot;meleg&quot;,&quot;burkolást&quot;,&quot;térkövezés&quot;,&quot;opel&quot;,&quot;astra&quot;,&quot;sedan&quot;,&quot;iphone&quot;,&quot;független&quot;,&quot;csere&quot;,&quot;is&quot;,&quot;oxford&quot;,&quot;advanced&quot;,&quot;learner&quot;,&quot;s&quot;,&quot;dictionary&quot;,&quot;angol&quot;,&quot;szótár&quot;,&quot;jura&quot;,&quot;e40&quot;,&quot;automata&quot;,&quot;darálós&quot;,&quot;kávégép&quot;,&quot;saeco&quot;,&quot;konkurense&quot;,&quot;rozsdamentes&quot;,&quot;háttérhűtő&quot;,&quot;kültéri&quot;,&quot;led&quot;,&quot;szalag&quot;,&quot;új&quot;,&quot;fejvédő&quot;,&quot;kiságyba&quot;,&quot;függöny&quot;,&quot;karnis&quot;,&quot;db&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d800&quot;,&quot;x1050&quot;,&quot;felbontás&quot;,&quot;1700mhz&quot;,&quot;fiatalos&quot;,&quot;hölgy&quot;,&quot;munkát&quot;,&quot;keres&quot;,&quot;eladó&quot;,&quot;sony&quot;,&quot;vaio&quot;,&quot;core2duo&quot;,&quot;laptopom&quot;,&quot;kislány&quot;,&quot;rugdalozók&quot;,&quot;női&quot;,&quot;papucs&quot;,&quot;es&quot;,&quot;korbársony&quot;,&quot;tavaszi&quot;,&quot;kislány&quot;,&quot;nadrág&quot;,&quot;belgrád&quot;,&quot;rkp&quot;,&quot;on&quot;,&quot;szobás&quot;,&quot;bútorozott&quot;,&quot;lakás&quot;,&quot;kiadó&quot;,&quot;eladó&quot;,&quot;kinai&quot;,&quot;moci&quot;,&quot;v&quot;,&quot;csere&quot;,&quot;súlyzó&quot;,&quot;két&quot;,&quot;kezes&quot;,&quot;kg&quot;,&quot;súllyal&quot;,&quot;alkalmi&quot;,&quot;áron&quot;,&quot;nokia&quot;,&quot;lumia&quot;,&quot;fekete&quot;,&quot;független&quot;,&quot;töltővel&quot;,&quot;ps4&quot;,&quot;watch&quot;,&quot;dogs&quot;,&quot;special&quot;,&quot;edition&quot;,&quot;magyar&quot;,&quot;felirattal&quot;,&quot;b&quot;,&quot;lego&quot;,&quot;creator&quot;,&quot;in1&quot;,&quot;féláron&quot;,&quot;43&quot;,&quot;nm&quot;,&quot;es&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;budapest&quot;,&quot;ker&quot;,&quot;nikecelgyöngy&quot;,&quot;köbméter&quot;,&quot;puma&quot;,&quot;és&quot;,&quot;adidas&quot;,&quot;cipő&quot;,&quot;új&quot;,&quot;eladó&quot;,&quot;több&quot;,&quot;méretbe&quot;,&quot;rieker&quot;,&quot;bőr&quot;,&quot;férfi&quot;,&quot;cipő&quot;,&quot;panasonic&quot;,&quot;sa&quot;,&quot;ch11&quot;,&quot;hifi&quot;,&quot;torony&quot;,&quot;apartman&quot;,&quot;átadó&quot;,&quot;munkatársakat&quot;,&quot;keresünk&quot;,&quot;eredeti&quot;,&quot;police&quot;,&quot;glory&quot;,&quot;férfi&quot;,&quot;karóra&quot;,&quot;kenvelo&quot;,&quot;rózsaszín&quot;,&quot;hosszú&quot;,&quot;ujjú&quot;,&quot;pulcsi&quot;,&quot;s&quot;,&quot;es&quot;,&quot;9w&quot;,&quot;os&quot;,&quot;körbetükrös&quot;,&quot;uv&quot;,&quot;lámpa&quot;,&quot;vita&quot;,&quot;team&quot;,&quot;sárgarépa&quot;,&quot;bioptron&quot;,&quot;lámpa&quot;,&quot;maxi&quot;,&quot;cosi&quot;,&quot;citi&quot;,&quot;sps&quot;,&quot;autósülés&quot;,&quot;hordozó&quot;,&quot;önetetők&quot;,&quot;etetőkosarak&quot;,&quot;lipótvárosi&quot;,&quot;nagypolgári&quot;,&quot;erkélyes&quot;,&quot;lakás&quot;,&quot;lego&quot;,&quot;friends&quot;,&quot;adventi&quot;,&quot;naptár&quot;,&quot;128&quot;,&quot;as&quot;,&quot;db&quot;,&quot;os&quot;,&quot;szett&quot;,&quot;kislányoknak&quot;,&quot;olcsó&quot;,&quot;gardrób&quot;,&quot;robot&quot;,&quot;hal&quot;,&quot;robofish&quot;,&quot;elemmel&quot;,&quot;úszik&quot;,&quot;mint&quot;,&quot;a&quot;,&quot;igazi&quot;,&quot;fehér&quot;,&quot;esküvői&quot;,&quot;ruha&quot;,&quot;kiváló&quot;,&quot;állapotban&quot;,&quot;játszószőnyeg&quot;,&quot;összerakható&quot;,&quot;hamburger&quot;,&quot;fajáték&quot;,&quot;új&quot;,&quot;elado&quot;,&quot;sodrott&quot;,&quot;kanca&quot;,&quot;tiszalökön&quot;,&quot;teljesen&quot;,&quot;új&quot;,&quot;ágyneműtartó&quot;,&quot;szekrény&quot;,&quot;eladó&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;s4&quot;,&quot;gt&quot;,&quot;i9505&quot;,&quot;gyári&quot;,&quot;független&quot;,&quot;msi&quot;,&quot;cr610&quot;,&quot;laptop&quot;,&quot;eladó&quot;,&quot;aeg&quot;,&quot;kg&quot;,&quot;digit&quot;,&quot;mosógép&quot;,&quot;monoron&quot;,&quot;eladó&quot;,&quot;fizika&quot;,&quot;jól&quot;,&quot;felkészültem&quot;,&quot;e&quot;,&quot;mitsubishi&quot;,&quot;pajeró&quot;,&quot;bontás&quot;,&quot;a&quot;,&quot;z&quot;,&quot;ig&quot;,&quot;minden&quot;,&quot;alfa&quot;,&quot;romeo&quot;,&quot;selespeed&quot;,&quot;alkatrészek&quot;,&quot;gt&quot;,&quot;kiadó&quot;,&quot;lakás&quot;,&quot;albérlet&quot;,&quot;szeged&quot;,&quot;belváros&quot;,&quot;guttemberg&quot;,&quot;ut&quot;,&quot;m&quot;,&quot;l&quot;,&quot;méretű&quot;,&quot;férfi&quot;,&quot;pulóver&quot;,&quot;csomag&quot;,&quot;yamaha&quot;,&quot;axis&quot;,&quot;50ccm&quot;,&quot;lenovo&quot;,&quot;ideapad&quot;,&quot;z580&quot;,&quot;laptop&quot;,&quot;eladó&quot;,&quot;xbox&quot;,&quot;forza&quot;,&quot;4&quot;,&quot;konyha&quot;,&quot;szekrény&quot;,&quot;kiárusítás&quot;,&quot;gázterv&quot;,&quot;készítés&quot;,&quot;logitech&quot;,&quot;z523&quot;,&quot;hangfalszett&quot;,&quot;új&quot;,&quot;garis&quot;,&quot;100&quot;,&quot;kg&quot;,&quot;arnold&quot;,&quot;gumírozott&quot;,&quot;súlytárcsa&quot;,&quot;eladó&quot;,&quot;31mm&quot;,&quot;great&quot;,&quot;mtb&quot;,&quot;felni&quot;,&quot;pár&quot;,&quot;x20&quot;,&quot;intel&quot;,&quot;core&quot;,&quot;i3&quot;,&quot;pc&quot;,&quot;x2&quot;,&quot;9ghz&quot;,&quot;4gb&quot;,&quot;320gb&quot;,&quot;lcd&quot;,&quot;eladó&quot;,&quot;5&quot;,&quot;col&quot;,&quot;gps&quot;,&quot;navigáció&quot;,&quot;radiotech&quot;,&quot;factory&quot;,&quot;garanciával&quot;,&quot;házimozi&quot;,&quot;erősítő&quot;,&quot;nevetö&quot;,&quot;sohajtó&quot;,&quot;baba&quot;,&quot;adidas&quot;,&quot;kislánycipő&quot;,&quot;32es&quot;,&quot;belső&quot;,&quot;talp&quot;,&quot;hossza&quot;,&quot;20cm&quot;,&quot;másodosztályú&quot;,&quot;trapézlemez&quot;,&quot;eladó&quot;,&quot;deutz&quot;,&quot;típusú&quot;,&quot;kis&quot;,&quot;traktor&quot;,&quot;whirlpool&quot;,&quot;hűtőszekrény&quot;,&quot;befektetőt&quot;,&quot;társat&quot;,&quot;keresek&quot;,&quot;spanyolországba&quot;,&quot;babapléd&quot;,&quot;ágynemű&quot;,&quot;új&quot;,&quot;komfort&quot;,&quot;plusz&quot;,&quot;táskarugós&quot;,&quot;matrac&quot;,&quot;160x200x18&quot;,&quot;cm&quot;,&quot;hibás&quot;,&quot;autó&quot;,&quot;akumlátor&quot;,&quot;töltő&quot;,&quot;cica&quot;,&quot;tatabányán&quot;,&quot;ingyen&quot;,&quot;elvihető&quot;,&quot;hilti&quot;,&quot;te&quot;,&quot;bontókalapács&quot;,&quot;lányka&quot;,&quot;női&quot;,&quot;cipők&quot;,&quot;eladó&quot;,&quot;3&quot;,&quot;m&quot;,&quot;hosszú&quot;,&quot;kamrás&quot;,&quot;gumi&quot;,&quot;motorcsónak&quot;,&quot;verbatim&quot;,&quot;led&quot;,&quot;égő&quot;,&quot;reebok&quot;,&quot;athletic&quot;,&quot;eredeti&quot;,&quot;zara&quot;,&quot;öltöny&quot;,&quot;alkalommal&quot;,&quot;használt&quot;,&quot;akció&quot;,&quot;ágyazható&quot;,&quot;sarokkanapé&quot;,&quot;nagyon&quot;,&quot;olcsó&quot;,&quot;fürdőszoba&quot;,&quot;elegant&quot;,&quot;fali&quot;,&quot;alsó&quot;,&quot;szekrény&quot;,&quot;55cm&quot;,&quot;mosdó&quot;,&quot;3db&quot;,&quot;új&quot;,&quot;lámpatest&quot;,&quot;3db&quot;,&quot;új&quot;,&quot;fénycsővel&quot;,&quot;egyben&quot;,&quot;olcsón&quot;,&quot;vennék&quot;,&quot;saját&quot;,&quot;részre&quot;,&quot;egy&quot;,&quot;x&quot;,&quot;box&quot;,&quot;gépet&quot;,&quot;játékokkal&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;lenovo&quot;,&quot;t400&quot;,&quot;eladó&quot;,&quot;újszerű&quot;,&quot;állapotban&quot;,&quot;niva&quot;,&quot;hid&quot;,&quot;eladó&quot;,&quot;velorex&quot;,&quot;kerék&quot;,&quot;eladó&quot;,&quot;besafe&quot;,&quot;izi&quot;,&quot;combi&quot;,&quot;x3&quot;,&quot;isofix&quot;,&quot;biztonsági&quot;,&quot;gyerekülés&quot;,&quot;donna&quot;,&quot;christina&quot;,&quot;cipő&quot;,&quot;nadrágkosztüm&quot;,&quot;jó&quot;,&quot;áron&quot;,&quot;teniszütő&quot;,&quot;pár&quot;,&quot;mikszáth&quot;,&quot;kálmán&quot;,&quot;utcai&quot;,&quot;emeleti&quot;,&quot;szobás&quot;,&quot;lakás&quot;,&quot;el&quot;,&quot;hajdúböszörményben&quot;,&quot;társasházi&quot;,&quot;lakás&quot;,&quot;eladó&quot;,&quot;20&quot;,&quot;gyerek&quot;,&quot;kerékpár&quot;,&quot;fekete&quot;,&quot;seat&quot;,&quot;cordoba&quot;,&quot;iii&quot;,&quot;ajtós&quot;,&quot;centrálzár&quot;,&quot;öntöttvas&quot;,&quot;kályha&quot;,&quot;házhoz&quot;,&quot;szállítással&quot;,&quot;pest&quot;,&quot;megyén&quot;,&quot;b&quot;,&quot;nyaklánccal&quot;,&quot;titanic&quot;,&quot;love&quot;,&quot;szett&quot;,&quot;6&quot;,&quot;tömör&quot;,&quot;gumi&quot;,&quot;felnivel&quot;,&quot;repülő&quot;,&quot;zöld&quot;,&quot;füli&quot;,&quot;új&quot;,&quot;baba&quot;,&quot;körömvágó&quot;,&quot;szett&quot;,&quot;darabos&quot;,&quot;krokodilbőr&quot;,&quot;táska&quot;,&quot;2&quot;,&quot;dl&quot;,&quot;es&quot;,&quot;bögre&quot;,&quot;műanyag&quot;,&quot;szép&quot;,&quot;szinekbe&quot;,&quot;amerikai&quot;,&quot;bulldog&quot;,&quot;abit&quot;,&quot;p4&quot;,&quot;2666mhz&quot;,&quot;pc&quot;,&quot;olcsón&quot;,&quot;215&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;michelin&quot;,&quot;diana&quot;,&quot;cm&quot;,&quot;es&quot;,&quot;sarok&quot;,&quot;blokk&quot;,&quot;konyhabútor&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;esküvői&quot;,&quot;ruha&quot;,&quot;eladó&quot;,&quot;gilera&quot;,&quot;runner&quot;,&quot;vxr&quot;,&quot;125cc&quot;,&quot;hannsg&quot;,&quot;hw191d&quot;,&quot;monitor&quot;,&quot;bébé&quot;,&quot;comfort&quot;,&quot;omega&quot;,&quot;etetőszék&quot;,&quot;szép&quot;,&quot;állapotban&quot;,&quot;eladó&quot;,&quot;premier&quot;,&quot;b&quot;,&quot;wood&quot;,&quot;vezetői&quot;,&quot;bőrfotel&quot;,&quot;eladó&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;festékkeverő&quot;,&quot;habarcskeverő&quot;,&quot;1400w&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;festékkeverő&quot;,&quot;habarcskeverő&quot;,&quot;1400w&quot;,&quot;likőrös&quot;,&quot;készlet&quot;,&quot;megbízható&quot;,&quot;nehézgépkezelőt&quot;,&quot;keresek&quot;,&quot;intel&quot;,&quot;dual&quot;,&quot;core&quot;,&quot;g840&quot;,&quot;ghz&quot;,&quot;lga1155&quot;,&quot;processzor&quot;,&quot;bukósisak&quot;,&quot;eladó&quot;,&quot;fehér&quot;,&quot;babafelső&quot;,&quot;galamb&quot;,&quot;lila&quot;,&quot;füli&quot;,&quot;teljesen&quot;,&quot;új&quot;,&quot;kutyatáska&quot;,&quot;eladó&quot;,&quot;10&quot;,&quot;hetes&quot;,&quot;cirmos&quot;,&quot;kiscica&quot;,&quot;bkv&quot;,&quot;bkk&quot;,&quot;éves&quot;,&quot;bérlet&quot;,&quot;2014&quot;,&quot;koloniál&quot;,&quot;komplett&quot;,&quot;garnitúra&quot;,&quot;koloniál&quot;,&quot;komplett&quot;,&quot;garnitúra&quot;,&quot;nancy&quot;,&quot;fürdőszoba&quot;,&quot;bútor&quot;,&quot;mosdó&quot;,&quot;nélkül&quot;,&quot;ágyazható&quot;,&quot;sarokülő&quot;,&quot;bak&quot;,&quot;kecske&quot;,&quot;gida&quot;,&quot;hónapos&quot;,&quot;barna&quot;,&quot;átmeneti&quot;,&quot;női&quot;,&quot;cipő&quot;,&quot;aprilia&quot;,&quot;sr&quot;,&quot;50&quot;,&quot;emu&quot;,&quot;piros&quot;,&quot;füli&quot;,&quot;fekete&quot;,&quot;selyeming&quot;,&quot;prestigio&quot;,&quot;multipad&quot;,&quot;prime&quot;,&quot;duo&quot;,&quot;3g&quot;,&quot;wifi&quot;,&quot;orion&quot;,&quot;televízió&quot;,&quot;mindigtv&quot;,&quot;extra&quot;,&quot;csomaggal&quot;,&quot;lakástakarék&quot;,&quot;szerződés&quot;,&quot;devizahitelesek&quot;,&quot;részére&quot;,&quot;dohányzóasztal&quot;,&quot;exeter&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;gyors&quot;,&quot;daraboló&quot;,&quot;355mm&quot;,&quot;koronggal&quot;,&quot;új&quot;,&quot;tommee&quot;,&quot;tippee&quot;,&quot;kézi&quot;,&quot;mellszívó&quot;,&quot;cserépkályha&quot;,&quot;épités&quot;,&quot;a&quot;,&quot;legolcsobban&quot;,&quot;garanciával&quot;,&quot;cserépkályha&quot;,&quot;épités&quot;,&quot;a&quot;,&quot;legolcsobban&quot;,&quot;garanciával&quot;,&quot;genius&quot;,&quot;billentyüzet&quot;,&quot;escada&quot;,&quot;i&quot;,&quot;as&quot;,&quot;franciaágy&quot;,&quot;samsung&quot;,&quot;p5100&quot;,&quot;galaxy&quot;,&quot;tab&quot;,&quot;g&quot;,&quot;beltéri&quot;,&quot;üvegburás&quot;,&quot;lámpacsalád&quot;,&quot;eladó&quot;,&quot;póni&quot;,&quot;fogat&quot;,&quot;205&quot;,&quot;45r17&quot;,&quot;használt&quot;,&quot;continental&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;20&quot;,&quot;lábas&quot;,&quot;konténer&quot;,&quot;raktárkonténer&quot;,&quot;garázs&quot;,&quot;olcsón&quot;,&quot;új&quot;,&quot;irha&quot;,&quot;mellény&quot;,&quot;babának&quot;,&quot;kumho&quot;,&quot;powergrip&quot;,&quot;r16&quot;,&quot;c&quot;,&quot;téli&quot;,&quot;gumik&quot;,&quot;2db&quot;,&quot;10&quot;,&quot;os&quot;,&quot;új&quot;,&quot;android&quot;,&quot;tablet&quot;,&quot;3g&quot;,&quot;vel&quot;,&quot;gépjármű&quot;,&quot;felelősségbiztosítások&quot;,&quot;casco&quot;,&quot;huawei&quot;,&quot;mediapad&quot;,&quot;s7&quot;,&quot;301u&quot;,&quot;maria&quot;,&quot;dankowska&quot;,&quot;négyszemközt&quot;,&quot;nokia&quot;,&quot;lumia&quot;,&quot;fekete&quot;,&quot;és&quot;,&quot;fehér&quot;,&quot;tok&quot;,&quot;optimus&quot;,&quot;l5&quot;,&quot;ii&quot;,&quot;lg&quot;,&quot;e460&quot;,&quot;új&quot;,&quot;mobiltelefon&quot;,&quot;eladó&quot;,&quot;fehé&quot;,&quot;vw&quot;,&quot;passat&quot;,&quot;pdtdi&quot;,&quot;vaj&quot;,&quot;bőr&quot;,&quot;digit&quot;,&quot;klíma&quot;,&quot;vonóh&quot;,&quot;seb&quot;,&quot;fodrász&quot;,&quot;bútorok&quot;,&quot;iphone&quot;,&quot;kemény&quot;,&quot;hátlap&quot;,&quot;tok&quot;,&quot;27&quot;,&quot;es&quot;,&quot;méretű&quot;,&quot;koptatott&quot;,&quot;farmer&quot;,&quot;nadrág&quot;,&quot;faust&quot;,&quot;kötelező&quot;,&quot;olvasmány&quot;,&quot;eladó&quot;,&quot;philips&quot;,&quot;avent&quot;,&quot;elektromos&quot;,&quot;mellszívó&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;alighasznált&quot;,&quot;digitális&quot;,&quot;fényképezö&quot;,&quot;gép&quot;,&quot;csavarodásmentes&quot;,&quot;locsolótömlő&quot;,&quot;tömlő&quot;,&quot;slag&quot;,&quot;25m&quot;,&quot;új&quot;,&quot;straus&quot;,&quot;austria&quot;,&quot;dekopír&quot;,&quot;fűrész&quot;,&quot;w&quot;,&quot;audi&quot;,&quot;a4&quot;,&quot;t&quot;,&quot;cserélhető&quot;,&quot;leárazás&quot;,&quot;gyerek&quot;,&quot;sícipő&quot;,&quot;kislány&quot;,&quot;póló&quot;,&quot;ruha&quot;,&quot;blúz&quot;,&quot;manda&quot;,&quot;scott&quot;,&quot;boudica&quot;,&quot;a&quot;,&quot;bika&quot;,&quot;látomása&quot;,&quot;eladó&quot;,&quot;lada&quot;,&quot;2107&quot;,&quot;chezlandi&quot;,&quot;póni&quot;,&quot;eladó&quot;,&quot;minnesotai&quot;,&quot;törpemalacok&quot;,&quot;kecskeméten&quot;,&quot;bmw&quot;,&quot;a&quot;,&quot;vevő&quot;,&quot;nevére&quot;,&quot;átírva&quot;,&quot;az&quot;,&quot;árban&quot;,&quot;szentendre&quot;,&quot;belvárosi&quot;,&quot;ajándékboltba&quot;,&quot;eladó&quot;,&quot;rózsaszínű&quot;,&quot;szélén&quot;,&quot;fekete&quot;,&quot;csipkés&quot;,&quot;szexis&quot;,&quot;fűző&quot;,&quot;simson&quot;,&quot;sr&quot;,&quot;gyári&quot;,&quot;állapotban&quot;,&quot;215&quot;,&quot;65r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;dunlop&quot;,&quot;ford&quot;,&quot;sierra&quot;,&quot;alkatrész&quot;,&quot;eladó&quot;,&quot;nagyméretű&quot;,&quot;gyapjú&quot;,&quot;szőnyeg19900&quot;,&quot;ft&quot;,&quot;ért&quot;,&quot;skoda&quot;,&quot;fábia&quot;,&quot;16v&quot;,&quot;eladó&quot;,&quot;pénzkazetta&quot;,&quot;overmax&quot;,&quot;ov&quot;,&quot;tb&quot;,&quot;iii&quot;,&quot;e&quot;,&quot;7col&quot;,&quot;táblagép&quot;,&quot;4gb&quot;,&quot;androi&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;ab&quot;,&quot;circle&quot;,&quot;pro&quot;,&quot;rakodó&quot;,&quot;munka&quot;,&quot;londonban&quot;,&quot;az&quot;,&quot;arla&quot;,&quot;tejüzemben&quot;,&quot;2&quot;,&quot;kecske&quot;,&quot;eladó&quot;,&quot;16&quot;,&quot;lila&quot;,&quot;biciki&quot;,&quot;205&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;michelin&quot;,&quot;4db&quot;,&quot;espiro&quot;,&quot;delta&quot;,&quot;autósülés&quot;,&quot;autós&quot;,&quot;gyerekülés&quot;,&quot;kg&quot;,&quot;co&quot;,&quot;235&quot;,&quot;45r17&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;fulda&quot;,&quot;sony&quot;,&quot;vaio&quot;,&quot;vgn&quot;,&quot;fw31zj&quot;,&quot;citroen&quot;,&quot;c3&quot;,&quot;hdi&quot;,&quot;profi&quot;,&quot;ac&quot;,&quot;temp&quot;,&quot;köd&quot;,&quot;gari&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;pocket&quot;,&quot;neo&quot;,&quot;h&quot;,&quot;m&quot;,&quot;loafer&quot;,&quot;eladó&quot;,&quot;gyermek&quot;,&quot;úszómellény&quot;,&quot;bider&quot;,&quot;kristály&quot;,&quot;serleg&quot;,&quot;burkolókat&quot;,&quot;keresek&quot;,&quot;azonnali&quot;,&quot;kezdéssel&quot;,&quot;nokia&quot;,&quot;c2&quot;,&quot;hibás&quot;,&quot;ufesa&quot;,&quot;bh&quot;,&quot;lábmasszírozó&quot;,&quot;lábfürdő&quot;,&quot;fekete&quot;,&quot;metál&quot;,&quot;golf&quot;,&quot;iv&quot;,&quot;eladó&quot;,&quot;185r&quot;,&quot;14c&quot;,&quot;kia&quot;,&quot;k2700&quot;,&quot;diákoknak&quot;,&quot;munkalehetőség&quot;,&quot;kazinbarcikán&quot;,&quot;samsung&quot;,&quot;i8200&quot;,&quot;galaxy&quot;,&quot;s3&quot;,&quot;mini&quot;,&quot;vadonatúj&quot;,&quot;tengerparti&quot;,&quot;mobil&quot;,&quot;ház&quot;,&quot;vásárlási&quot;,&quot;ajánlat&quot;,&quot;dalmáciába&quot;,&quot;magasszárú&quot;,&quot;cipő&quot;,&quot;fényszóró&quot;,&quot;magasság&quot;,&quot;állító&quot;,&quot;motorok&quot;,&quot;eladó&quot;,&quot;fiat&quot;,&quot;brava&quot;,&quot;bravo&quot;,&quot;marea&quot;,&quot;fényszóró&quot;,&quot;gyári&quot;,&quot;2db&quot;,&quot;fotó&quot;,&quot;diszkó&quot;,&quot;vagy&quot;,&quot;infrázáshoz&quot;,&quot;lámpa&quot;,&quot;leonora&quot;,&quot;franciaágy&quot;,&quot;american&quot;,&quot;bully&quot;,&quot;champagne&quot;,&quot;puppy&quot;,&quot;for&quot;,&quot;sale&quot;,&quot;kan&quot;,&quot;fedez&quot;,&quot;cukrászda&quot;,&quot;cukrászüzem&quot;,&quot;abda&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;ps5207&quot;,&quot;delux&quot;,&quot;pihenőszék&quot;,&quot;delphi&quot;,&quot;programozókat&quot;,&quot;keresünk&quot;,&quot;építöiparban&quot;,&quot;jártas&quot;,&quot;örökbe&quot;,&quot;fogadható&quot;,&quot;kutya&quot;,&quot;mandy&quot;,&quot;azonnal&quot;,&quot;altatható&quot;,&quot;ford&quot;,&quot;fiesta&quot;,&quot;mk6&quot;,&quot;sport&quot;,&quot;szárny&quot;,&quot;e&quot;,&quot;go&quot;,&quot;t&quot;,&quot;elektromos&quot;,&quot;cigi&quot;,&quot;olcsón&quot;,&quot;epson&quot;,&quot;stylus&quot;,&quot;photo&quot;,&quot;nyomtató&quot;,&quot;opel&quot;,&quot;vivaro&quot;,&quot;felújított&quot;,&quot;váltók&quot;,&quot;eladók&quot;,&quot;crazy&quot;,&quot;fit&quot;,&quot;massage&quot;,&quot;iphone&quot;,&quot;3g&quot;,&quot;eladó&quot;,&quot;vagy&quot;,&quot;csere&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;mini&quot;,&quot;eladó&quot;,&quot;használt&quot;,&quot;ariston&quot;,&quot;ls248t&quot;,&quot;mosogatógép&quot;,&quot;160gb&quot;,&quot;os&quot;,&quot;gef&quot;,&quot;7300gt&quot;,&quot;s&quot;,&quot;mhz&quot;,&quot;es&quot;,&quot;lenovo&quot;,&quot;lcd&quot;,&quot;elado&quot;,&quot;gyonyoru&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;eladó&quot;,&quot;baby&quot;,&quot;merc&quot;,&quot;agat&quot;,&quot;lux&quot;,&quot;babakocsi&quot;,&quot;menyasszonyi&quot;,&quot;ruha&quot;,&quot;kiegészítők&quot;,&quot;eladó&quot;,&quot;honda&quot;,&quot;gyro&quot;,&quot;canopy50&quot;,&quot;185&quot;,&quot;60r14&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;goodyear&quot;,&quot;nike&quot;,&quot;női&quot;,&quot;cipő&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;gyalugép&quot;,&quot;és&quot;,&quot;vastagoló&quot;,&quot;konyhai&quot;,&quot;gyakorlattal&quot;,&quot;eladó&quot;,&quot;kerestetik&quot;,&quot;eladó&quot;,&quot;használt&quot;,&quot;acer&quot;,&quot;5750g&quot;,&quot;laptop&quot;,&quot;digtafon&quot;,&quot;kassetás&quot;,&quot;mini&quot;,&quot;tisztasági&quot;,&quot;festés&quot;,&quot;olcsón&quot;,&quot;új&quot;,&quot;samsung&quot;,&quot;n7100&quot;,&quot;galaxy&quot;,&quot;note&quot;,&quot;fehér&quot;,&quot;színben&quot;,&quot;babahordozó&quot;,&quot;olcsón&quot;,&quot;eladó&quot;,&quot;magyar&quot;,&quot;szakos&quot;,&quot;tanár&quot;,&quot;lenovo&quot;,&quot;y580&quot;,&quot;gamer&quot;,&quot;i7&quot;,&quot;8gb&quot;,&quot;1tb&quot;,&quot;128gb&quot;,&quot;660m&quot;,&quot;fhd&quot;,&quot;canon&quot;,&quot;nyomtatópatronok&quot;,&quot;lada&quot;,&quot;samara&quot;,&quot;motorháztető&quot;,&quot;eladó&quot;,&quot;suzuki&quot;,&quot;swift&quot;,&quot;gl&quot;,&quot;irány&quot;,&quot;ár&quot;,&quot;tp&quot;,&quot;link&quot;,&quot;wr340gd&quot;,&quot;kombinált&quot;,&quot;gyalugép&quot;,&quot;pioneer&quot;,&quot;sc&quot;,&quot;lx75&quot;,&quot;csatornás&quot;,&quot;házimozi&quot;,&quot;erősítő&quot;,&quot;franciarudas&quot;,&quot;súlyzó&quot;,&quot;készlet&quot;,&quot;kg&quot;,&quot;samsung&quot;,&quot;tv&quot;,&quot;cw29m066&quot;,&quot;használt&quot;,&quot;tako&quot;,&quot;babakocsi&quot;,&quot;nyomtató&quot;,&quot;patron&quot;,&quot;ft&quot;,&quot;db&quot;,&quot;szakácsot&quot;,&quot;keresek&quot;,&quot;üveglapos&quot;,&quot;dohányzó&quot;,&quot;asztal&quot;,&quot;hp&quot;,&quot;compaq&quot;,&quot;nc8430&quot;,&quot;gamer&quot;,&quot;165&quot;,&quot;70r14&quot;,&quot;használt&quot;,&quot;nyári&quot;,&quot;gumi&quot;,&quot;4db&quot;,&quot;firestone&quot;,&quot;némakacsa&quot;,&quot;tojó&quot;,&quot;apró&quot;,&quot;lánykutya&quot;,&quot;gazdához&quot;,&quot;menne&quot;,&quot;tacskó&quot;,&quot;cannon&quot;,&quot;ip&quot;,&quot;tintasugaras&quot;,&quot;nyomtató&quot;,&quot;htc&quot;,&quot;one&quot;,&quot;eladó&quot;,&quot;csere&quot;,&quot;tóparti&quot;,&quot;építési&quot;,&quot;telek&quot;,&quot;délegyházán&quot;,&quot;zajcsökkentö&quot;,&quot;stereo&quot;,&quot;headsett&quot;,&quot;ujonnan&quot;,&quot;olcsón&quot;,&quot;artemisz&quot;,&quot;franciaágy&quot;,&quot;ágyneműtartós&quot;,&quot;140x200cm&quot;,&quot;pedrollo&quot;,&quot;easypress&quot;,&quot;ii&quot;,&quot;áramláskapcsoló&quot;,&quot;sony&quot;,&quot;hagyományos&quot;,&quot;színes&quot;,&quot;tv&quot;,&quot;új&quot;,&quot;állapotú&quot;,&quot;kőroppantó&quot;,&quot;nokia&quot;,&quot;c&quot;,&quot;00&quot;,&quot;kismama&quot;,&quot;felső&quot;,&quot;babaruhák&quot;,&quot;eladóak&quot;,&quot;szekrénysor&quot;,&quot;régi&quot;,&quot;tipusú&quot;,&quot;új&quot;,&quot;színes&quot;,&quot;pamut&quot;,&quot;törölköző&quot;,&quot;db&quot;,&quot;háztól&quot;,&quot;házig&quot;,&quot;elado&quot;,&quot;arany&quot;,&quot;ékszer&quot;,&quot;vasasztal&quot;,&quot;satukkal&quot;,&quot;újságtartó&quot;,&quot;remek&quot;,&quot;áron&quot;,&quot;választási&quot;,&quot;malacok&quot;,&quot;eladók&quot;,&quot;wewood&quot;,&quot;alpha&quot;,&quot;csokoládé&quot;,&quot;karóra&quot;,&quot;új&quot;,&quot;sony&quot;,&quot;xperia&quot;,&quot;z&quot;,&quot;c6603&quot;,&quot;vadonatúj&quot;,&quot;kártya&quot;,&quot;erdészettól&quot;,&quot;konyhakész&quot;,&quot;tüzifa&quot;,&quot;garantált&quot;,&quot;mennyiség&quot;,&quot;apple&quot;,&quot;iphone&quot;,&quot;3g&quot;,&quot;16gb&quot;,&quot;fekete&quot;,&quot;színben&quot;,&quot;betegápolást&quot;,&quot;idős&quot;,&quot;emberek&quot;,&quot;gondozását&quot;,&quot;vállalom&quot;,&quot;eladó&quot;,&quot;es&quot;,&quot;gyári&quot;,&quot;opel&quot;,&quot;alufelni&quot;,&quot;4x100&quot;,&quot;állás&quot;,&quot;budapest&quot;,&quot;it&quot;,&quot;telekommunikáció&quot;,&quot;converse&quot;,&quot;cipő&quot;,&quot;komplett&quot;,&quot;őszi&quot;,&quot;ruhacsomag&quot;,&quot;ajándék&quot;,&quot;új&quot;,&quot;nem&quot;,&quot;gsm&quot;,&quot;boltos&quot;,&quot;motorola&quot;,&quot;moto&quot;,&quot;g&quot;,&quot;független&quot;,&quot;sony&quot;,&quot;xperia&quot;,&quot;z&quot;,&quot;tmobile&quot;,&quot;számitógép&quot;,&quot;pentium&quot;,&quot;es&quot;,&quot;farmer&quot;,&quot;ing&quot;,&quot;kabát&quot;,&quot;férfi&quot;,&quot;xxl&quot;,&quot;szakács&quot;,&quot;munkát&quot;,&quot;keres&quot;,&quot;pentax&quot;,&quot;mz&quot;,&quot;objektivek&quot;,&quot;alkatrészek&quot;,&quot;simson&quot;,&quot;dél&quot;,&quot;törökország&quot;,&quot;és&quot;,&quot;pamukkale&quot;,&quot;nap&quot;,&quot;repülővel&quot;,&quot;3&quot;,&quot;ben&quot;,&quot;touragoo&quot;,&quot;babakocsi&quot;,&quot;eladó&quot;,&quot;romantikus&quot;,&quot;könyvcsomag&quot;,&quot;alexandra&quot;,&quot;kiadó&quot;,&quot;chevrolet&quot;,&quot;blazer&quot;,&quot;benzines&quot;,&quot;alkatrészei&quot;,&quot;metzeler&quot;,&quot;motorgumi&quot;,&quot;bocikák&quot;,&quot;eladók&quot;,&quot;porcsalmán&quot;,&quot;samsung&quot;,&quot;i9250&quot;,&quot;galaxy&quot;,&quot;nexus&quot;,&quot;vadonatúj&quot;,&quot;kártya&quot;,&quot;weslo&quot;,&quot;energy&quot;,&quot;board&quot;,&quot;vibrációs&quot;,&quot;tréner&quot;,&quot;kia&quot;,&quot;ceed&quot;,&quot;sw&quot;,&quot;crdi&quot;,&quot;kombi&quot;,&quot;toyota&quot;,&quot;motoros&quot;,&quot;yamaha&quot;,&quot;mbk&quot;,&quot;fizz&quot;,&quot;t&quot;,&quot;pulóver&quot;,&quot;mexx&quot;,&quot;m&quot;,&quot;es&quot;,&quot;oklahomai&quot;,&quot;nemzeti&quot;,&quot;gárda&quot;,&quot;nagyméretű&quot;,&quot;komplett&quot;,&quot;zhu&quot;,&quot;zhu&quot;,&quot;pets&quot;,&quot;pálya&quot;,&quot;hörcsögge&quot;,&quot;herendi&quot;,&quot;táncoló&quot;,&quot;betyár&quot;,&quot;gyönyörü&quot;,&quot;csodás&quot;,&quot;alkotás&quot;,&quot;philips&quot;,&quot;avent&quot;,&quot;játszócumi&quot;,&quot;hó&quot;,&quot;db&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d531&quot;,&quot;dual&quot;,&quot;core&quot;,&quot;gb&quot;,&quot;ram&quot;,&quot;hónap&quot;,&quot;gari&quot;,&quot;menyecske&quot;,&quot;ruha&quot;,&quot;nagy&quot;,&quot;méretű&quot;,&quot;kalocsai&quot;,&quot;kézimunka&quot;,&quot;keretezve&quot;,&quot;arthur&quot;,&quot;c&quot;,&quot;clarke&quot;,&quot;randevú&quot;,&quot;a&quot;,&quot;rámával&quot;,&quot;biotorus&quot;,&quot;lt&quot;,&quot;eladó&quot;,&quot;hilti&quot;,&quot;sarokcsiszoló&quot;,&quot;lenovo&quot;,&quot;miix&quot;,&quot;szoptatós&quot;,&quot;párna&quot;,&quot;vegyes&quot;,&quot;videókazetta&quot;,&quot;gyüjtemény&quot;,&quot;csomag&quot;,&quot;fajtiszta&quot;,&quot;kaliforniai&quot;,&quot;választási&quot;,&quot;nyulak&quot;,&quot;canon&quot;,&quot;50d&quot;,&quot;canon&quot;,&quot;50mm&quot;,&quot;objektív&quot;,&quot;merci&quot;,&quot;eladó&quot;,&quot;fríss&quot;,&quot;müszakival&quot;,&quot;180x200&quot;,&quot;fenyő&quot;,&quot;franciaágy&quot;,&quot;ágybetét&quot;,&quot;george&quot;,&quot;peppás&quot;,&quot;ruha11&quot;,&quot;évesre&quot;,&quot;volkswagen&quot;,&quot;passat&quot;,&quot;tdi&quot;,&quot;variant&quot;,&quot;év&quot;,&quot;vizsga&quot;,&quot;50l&quot;,&quot;es&quot;,&quot;terrárium&quot;,&quot;eladó&quot;,&quot;kia&quot;,&quot;carens&quot;,&quot;családi&quot;,&quot;autó&quot;,&quot;eladó&quot;,&quot;volvo&quot;,&quot;v50&quot;,&quot;alkatrészek&quot;,&quot;ajtó&quot;,&quot;motor&quot;,&quot;lökhárító&quot;,&quot;futómű&quot;,&quot;michelin&quot;,&quot;alpin&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;r15&quot;,&quot;felnivel&quot;,&quot;színes&quot;,&quot;kávéskészlet&quot;,&quot;személyes&quot;,&quot;timberland&quot;,&quot;kisfiú&quot;,&quot;bakancs&quot;,&quot;eladó&quot;,&quot;munkát&quot;,&quot;keresek&quot;,&quot;szeptembertől&quot;,&quot;3gb&quot;,&quot;os&quot;,&quot;ddr5&quot;,&quot;zotac&quot;,&quot;típusú&quot;,&quot;videokártya&quot;,&quot;4db&quot;,&quot;bridgestone&quot;,&quot;r16&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;eladó&quot;,&quot;szombat&quot;,&quot;vasarnapra&quot;,&quot;erden&quot;,&quot;eladot&quot;,&quot;keresunk&quot;,&quot;eladó&quot;,&quot;új&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;ace3&quot;,&quot;ikea&quot;,&quot;leksvik&quot;,&quot;antik&quot;,&quot;pácolt&quot;,&quot;pad&quot;,&quot;215&quot;,&quot;55r16&quot;,&quot;használt&quot;,&quot;téli&quot;,&quot;gumi&quot;,&quot;2db&quot;,&quot;pirelli&quot;,&quot;4&quot;,&quot;as&quot;,&quot;alufelni&quot;,&quot;garnitúra&quot;,&quot;r15&quot;,&quot;gumival&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;young&quot;,&quot;lenovo&quot;,&quot;thinkpad&quot;,&quot;x201&quot;,&quot;i5&quot;,&quot;intel&quot;,&quot;proci&quot;,&quot;gb&quot;,&quot;ram&quot;,&quot;eladó&quot;,&quot;cserélhető&quot;,&quot;es&quot;,&quot;lószálító&quot;,&quot;golf3&quot;,&quot;ablaktörlö&quot;,&quot;kapcsoló&quot;,&quot;keresek&quot;,&quot;fenyő&quot;,&quot;franciaágy&quot;,&quot;szalma&quot;,&quot;bála&quot;,&quot;eladó&quot;,&quot;gazdira&quot;,&quot;váró&quot;,&quot;kutyák&quot;,&quot;mosonmagyaróvár&quot;,&quot;és&quot;,&quot;környéke&quot;,&quot;2&quot;,&quot;asus&quot;,&quot;x551ma&quot;,&quot;sx066d&quot;,&quot;notebook&quot;,&quot;új&quot;,&quot;új&quot;,&quot;rezgő&quot;,&quot;pihenőszék&quot;,&quot;játékhíddal&quot;,&quot;dallamokkal&quot;,&quot;irha&quot;,&quot;bunda&quot;,&quot;akció&quot;,&quot;most39&quot;,&quot;990ft&quot;,&quot;helyett&quot;,&quot;csak19&quot;,&quot;990ft&quot;,&quot;mosógép&quot;,&quot;hoover&quot;,&quot;dyt&quot;,&quot;5kg&quot;,&quot;felültöltős&quot;,&quot;kazán&quot;,&quot;vegyes&quot;,&quot;tűzelésü&quot;,&quot;professzionális&quot;,&quot;kétkaros&quot;,&quot;kávégép&quot;,&quot;eladó&quot;,&quot;linz&quot;,&quot;kanapé&quot;,&quot;ággyá&quot;,&quot;alakítható&quot;,&quot;bonell&quot;,&quot;rugós&quot;,&quot;miele&quot;,&quot;német&quot;,&quot;fesőkategóriás&quot;,&quot;mosógép&quot;,&quot;seat&quot;,&quot;cordoba&quot;,&quot;mk2&quot;,&quot;bal&quot;,&quot;első&quot;,&quot;sárvédő&quot;,&quot;vw&quot;,&quot;golf&quot;,&quot;gti&quot;,&quot;n&quot;,&quot;lévő&quot;,&quot;alufelni&quot;,&quot;netgear&quot;,&quot;wg311t&quot;,&quot;autófelvásárlás&quot;,&quot;a&quot;,&quot;legmagasabb&quot;,&quot;eurotax&quot;,&quot;áron&quot;,&quot;játékos&quot;,&quot;középméretű&quot;,&quot;szuka&quot;,&quot;kölyök&quot;,&quot;kutyus&quot;,&quot;földieper&quot;,&quot;szamóca&quot;,&quot;palánta&quot;,&quot;alcatel&quot;,&quot;ot&quot;,&quot;ultra&quot;,&quot;csere&quot;,&quot;is&quot;,&quot;renault&quot;,&quot;clio&quot;,&quot;váltó&quot;,&quot;alkatrésznek&quot;,&quot;ingatlanközvetítőket&quot;,&quot;keresünk&quot;,&quot;új&quot;,&quot;graf&quot;,&quot;es&quot;,&quot;hokikori&quot;,&quot;es&quot;,&quot;legújabb&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;i5&quot;,&quot;8gb&quot;,&quot;128ssd&quot;,&quot;generic&quot;,&quot;xor&quot;,&quot;4t&quot;,&quot;km&quot;,&quot;új&quot;,&quot;nagy&quot;,&quot;méretű&quot;,&quot;eredeti&quot;,&quot;saxoo&quot;,&quot;napszemüvegtok&quot;,&quot;r14c&quot;,&quot;új&quot;,&quot;gumik&quot;,&quot;yokohama&quot;,&quot;y354&quot;,&quot;made&quot;,&quot;in&quot;,&quot;japan&quot;,&quot;sony&quot;,&quot;microhifi&quot;,&quot;hangfalszett&quot;,&quot;beltéri&quot;,&quot;ajtó&quot;,&quot;75x210&quot;,&quot;naturtanya&quot;,&quot;hungary&quot;,&quot;kft&quot;,&quot;marketinges&quot;,&quot;kollégát&quot;,&quot;keres&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;s&quot;,&quot;advance&quot;,&quot;új&quot;,&quot;trónbili&quot;,&quot;lezáródó&quot;,&quot;fededes&quot;,&quot;kivehető&quot;,&quot;betéttel&quot;,&quot;lépcsőző&quot;,&quot;gép&quot;,&quot;holzmann&quot;,&quot;merti&quot;,&quot;rusztikus&quot;,&quot;komod&quot;,&quot;es&quot;,&quot;fali&quot;,&quot;szekreny&quot;,&quot;eladó&quot;,&quot;opel&quot;,&quot;vectra&quot;,&quot;b&quot;,&quot;cdx&quot;,&quot;felszerelt&quot;,&quot;megkimélt&quot;,&quot;takarító&quot;,&quot;munkatársakat&quot;,&quot;keresünk&quot;,&quot;szecessziós&quot;,&quot;nőalak&quot;,&quot;szobor&quot;,&quot;avent&quot;,&quot;cumi&quot;,&quot;munkat&quot;,&quot;keresek&quot;,&quot;csalad&quot;,&quot;fenntartas&quot;,&quot;celbol&quot;,&quot;eladó&quot;,&quot;nokia&quot;,&quot;slide&quot;,&quot;balatonboglári&quot;,&quot;üzletbe&quot;,&quot;nemdohányzó&quot;,&quot;eladót&quot;,&quot;keresünk&quot;,&quot;összecsukható&quot;,&quot;babakocsi&quot;,&quot;hévízen&quot;,&quot;eladó&quot;,&quot;színes&quot;,&quot;törpe&quot;,&quot;nyúl&quot;,&quot;babakocsi&quot;,&quot;tartozékokal&quot;,&quot;oxigén&quot;,&quot;és&quot;,&quot;diszu&quot;,&quot;palackok&quot;,&quot;mosógépmotor&quot;,&quot;eladó&quot;,&quot;eladó&quot;,&quot;hasas&quot;,&quot;sportpóni&quot;,&quot;kanca&quot;,&quot;electrolux&quot;,&quot;csomagolt&quot;,&quot;vastagfalú&quot;,&quot;180l&quot;,&quot;fagyasztóláda&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;ic2d&quot;,&quot;4gb&quot;,&quot;320gb&quot;,&quot;hdd&quot;,&quot;hun&quot;,&quot;lador&quot;,&quot;swiss&quot;,&quot;zenélő&quot;,&quot;söröskorsók&quot;,&quot;bejelentett&quot;,&quot;esztergályos&quot;,&quot;főállás&quot;,&quot;kiskunfélegyházán&quot;,&quot;eladó&quot;,&quot;egy&quot;,&quot;t&quot;,&quot;mobile&quot;,&quot;black&quot;,&quot;apple&quot;,&quot;iphone4&quot;,&quot;16gb&quot;,&quot;hajtogatott&quot;,&quot;papírtörölköző&quot;,&quot;tartó&quot;,&quot;pizsirugik&quot;,&quot;hós&quot;,&quot;miele&quot;,&quot;cva&quot;,&quot;beépíthető&quot;,&quot;kávéfőző&quot;,&quot;bmw&quot;,&quot;x&quot;,&quot;drive&quot;,&quot;skoda&quot;,&quot;felicia&quot;,&quot;tetőcsomagtartó&quot;,&quot;új&quot;,&quot;törölköző&quot;,&quot;12db&quot;,&quot;cs&quot;,&quot;ajándék&quot;,&quot;ingyen&quot;,&quot;háztól&quot;,&quot;házig&quot;,&quot;üzlethelyiség&quot;,&quot;m2&quot;,&quot;sinko&quot;,&quot;zsolnay&quot;,&quot;kutyával&quot;,&quot;játszó&quot;,&quot;fiú&quot;,&quot;állatos&quot;,&quot;pecsételő&quot;,&quot;gyerekeknek&quot;,&quot;suzuki&quot;,&quot;sv&quot;,&quot;rendszámos&quot;,&quot;eladó&quot;,&quot;alkalmi&quot;,&quot;vétel&quot;,&quot;dell&quot;,&quot;latitude&quot;,&quot;d505&quot;,&quot;centrino&quot;,&quot;ghz&quot;,&quot;1&quot;,&quot;újszerű&quot;,&quot;fujifilm&quot;,&quot;s4000&quot;,&quot;hd&quot;,&quot;bridge&quot;,&quot;fényképezőgép&quot;,&quot;canon&quot;,&quot;eos&quot;,&quot;1000d&quot;,&quot;fényképezőgép&quot;,&quot;váz&quot;,&quot;hó&quot;,&quot;garancia&quot;,&quot;shamballa&quot;,&quot;csilli&quot;,&quot;villi&quot;,&quot;karkötő&quot;,&quot;új&quot;,&quot;új&quot;,&quot;baby&quot;,&quot;design&quot;,&quot;sprint&quot;,&quot;plus&quot;,&quot;multifunkciós&quot;,&quot;babakocsi&quot;,&quot;traktorhoz&quot;,&quot;fejes&quot;,&quot;eke&quot;,&quot;olcson&quot;,&quot;elado&quot;,&quot;ibm&quot;,&quot;lenovo&quot;,&quot;t400&quot;,&quot;thinkpad&quot;,&quot;nagyon&quot;,&quot;szép&quot;,&quot;újszerű&quot;,&quot;nokia&quot;,&quot;x2&quot;,&quot;telefon&quot;,&quot;hónapos&quot;,&quot;eladó&quot;,&quot;garanciás&quot;,&quot;bukósisak&quot;,&quot;sport&quot;,&quot;sony&quot;,&quot;psp&quot;,&quot;eladó&quot;,&quot;h&quot;,&quot;m&quot;,&quot;es&quot;,&quot;női&quot;,&quot;farmer&quot;,&quot;miniszoknya&quot;,&quot;zhu&quot;,&quot;zhu&quot;,&quot;pets&quot;,&quot;repülőtér&quot;,&quot;szett&quot;,&quot;új&quot;,&quot;intel&quot;,&quot;pentium&quot;,&quot;06ghz&quot;,&quot;proci&quot;,&quot;mam&quot;,&quot;etetőcumi&quot;,&quot;bontatlan&quot;,&quot;szervízvezető&quot;,&quot;barjavel&quot;,&quot;a&quot;,&quot;nagy&quot;,&quot;titok&quot;,&quot;makulatlan&quot;,&quot;samsung&quot;,&quot;galaxy&quot;,&quot;ace&quot;,&quot;plus&quot;,&quot;next&quot;,&quot;kabát&quot;,&quot;éves&quot;,&quot;méret&quot;,&quot;pihe&quot;,&quot;puha&quot;,&quot;ferrobull&quot;,&quot;borjúóvoda&quot;,&quot;a&quot;,&quot;maximális&quot;,&quot;súlygyarapodásért&quot;,&quot;raf&quot;,&quot;pol&quot;,&quot;mózeskosaras&quot;,&quot;babakocsi&quot;,&quot;fix&quot;,&quot;jutalék&quot;,&quot;ingatlanközvetítői&quot;,&quot;állás&quot;,&quot;műszaki&quot;,&quot;előkészítő&quot;,&quot;irodai&quot;,&quot;munkatárs&quot;,&quot;renault&quot;,&quot;megane&quot;,&quot;scenic&quot;,&quot;kormánymű&quot;,&quot;pannon&quot;,&quot;fehér&quot;,&quot;baknyúl&quot;,&quot;call&quot;,&quot;of&quot;,&quot;duty&quot;,&quot;world&quot;,&quot;at&quot;,&quot;war&quot;,&quot;playstation&quot;,&quot;játék&quot;,&quot;hyundai&quot;,&quot;hyd&quot;,&quot;literes&quot;,&quot;olajos&quot;,&quot;kompresszor&quot;,&quot;élelmiszer&quot;,&quot;ipari&quot;,&quot;sokkoló&quot;,&quot;kőművest&quot;,&quot;keresek&quot;,&quot;azonnali&quot;,&quot;munkakezdéssel&quot;,&quot;charles&quot;,&quot;vögele&quot;,&quot;kardigán&quot;,&quot;playstation&quot;,&quot;1&quot;,&quot;új&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;i5&quot;,&quot;4gb&quot;,&quot;128ssd&quot;,&quot;hun&quot;,&quot;műirha&quot;,&quot;bunda&quot;,&quot;női&quot;,&quot;kabát&quot;,&quot;iveco&quot;,&quot;deutz&quot;,&quot;terepváltó&quot;,&quot;jó&quot;,&quot;állapotban&quot;,&quot;converse&quot;,&quot;jack&quot;,&quot;purcel&quot;,&quot;cipő&quot;,&quot;es&quot;,&quot;gilera&quot;,&quot;mx1&quot;,&quot;8900km&quot;,&quot;ft&quot;,&quot;magyar&quot;,&quot;papírok&quot;,&quot;kis&quot;,&quot;bálás&quot;,&quot;szalma&quot;,&quot;eladó&quot;,&quot;lorelli&quot;,&quot;maranello&quot;,&quot;plus&quot;,&quot;autós&quot;,&quot;gyerekülés&quot;,&quot;kg&quot;,&quot;asus&quot;,&quot;am2&quot;,&quot;am3&quot;,&quot;alaplap&quot;,&quot;proci&quot;,&quot;ram&quot;,&quot;eladó&quot;,&quot;philips&quot;,&quot;senseo&quot;,&quot;kávéfőző&quot;,&quot;eladó&quot;,&quot;2&quot;,&quot;literes&quot;,&quot;fonott&quot;,&quot;demizson&quot;,&quot;bontókalapács&quot;,&quot;egészséges&quot;,&quot;rozella&quot;,&quot;pár&quot;,&quot;eladó&quot;,&quot;whirlpool&quot;,&quot;awt&quot;,&quot;automata&quot;,&quot;mosógép&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;sportbabakocsi&quot;,&quot;vendéglátói&quot;,&quot;munkát&quot;,&quot;keresek&quot;,&quot;kerti&quot;,&quot;pad&quot;,&quot;lóca&quot;,&quot;motor&quot;,&quot;csonak&quot;,&quot;mercedes&quot;,&quot;sprinter&quot;,&quot;vito&quot;,&quot;motorok&quot;,&quot;eladok&quot;,&quot;26&quot;,&quot;os&quot;,&quot;összteleszkópos&quot;,&quot;mtb&quot;,&quot;kerékpár&quot;,&quot;szunyog&quot;,&quot;riasztó&quot;,&quot;növény&quot;,&quot;nagy&quot;,&quot;méretben&quot;,&quot;eladó&quot;,&quot;kiegészítők&quot;,&quot;magasnyomású&quot;,&quot;mosóhoz&quot;,&quot;chrysler&quot;,&quot;stratus&quot;,&quot;le&quot;,&quot;kitalálós&quot;,&quot;játék&quot;,&quot;educa&quot;,&quot;sofőrt&quot;,&quot;felveszünk&quot;,&quot;kisteherautóra&quot;,&quot;retina&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;ghz&quot;,&quot;i7&quot;,&quot;16gb&quot;,&quot;ram&quot;,&quot;ssd&quot;,&quot;bmw&quot;,&quot;e39&quot;,&quot;ködlámpapár&quot;,&quot;gyári&quot;,&quot;hibátlan&quot;,&quot;tefal&quot;,&quot;pro&quot;,&quot;express&quot;,&quot;gőzállomásos&quot;,&quot;vasaló&quot;,&quot;bavaria&quot;,&quot;kávéscsésze&quot;,&quot;alátét&quot;,&quot;2011&quot;,&quot;macbook&quot;,&quot;pro&quot;,&quot;quad&quot;,&quot;i7&quot;,&quot;ghz&quot;,&quot;8gb&quot;,&quot;magyar&quot;,&quot;búza&quot;,&quot;szalma&quot;,&quot;eladó&quot;,&quot;operátor&quot;,&quot;tárgylemez&quot;,&quot;készítő&quot;,&quot;németjuhász&quot;,&quot;szuka&quot;,&quot;örökbe&quot;,&quot;macbook&quot;,&quot;air&quot;,&quot;ghz&quot;,&quot;intelcore&quot;,&quot;i7&quot;,&quot;256ssd&quot;,&quot;angelo&quot;,&quot;litrico&quot;,&quot;férfi&quot;,&quot;ing&quot;,&quot;nöi&quot;,&quot;kardigán&quot;,&quot;accu&quot;,&quot;chek&quot;,&quot;vércukor&quot;,&quot;tesztcsík&quot;,&quot;chipolino&quot;,&quot;sport&quot;,&quot;babakocsi&quot;,&quot;2&quot;,&quot;db&quot;,&quot;s&quot;,&quot;es&quot;,&quot;bizsu&quot;,&quot;gyűrű&quot;,&quot;1&quot;,&quot;4es&quot;,&quot;tanuló&quot;,&quot;kishegedú&quot;,&quot;eladó&quot;,&quot;személy&quot;,&quot;és&quot;,&quot;vagyonőrök&quot;,&quot;részére&quot;,&quot;azonnali&quot;,&quot;munka&quot;,&quot;kecske&quot;,&quot;nöstény&quot;,&quot;örökbe&quot;,&quot;fogadható&quot;,&quot;kutya&quot;,&quot;bogárkám&quot;,&quot;beltéri&quot;,&quot;ajtók&quot;,&quot;eladók&quot;,&quot;puli&quot;,&quot;kan&quot;,&quot;kölyök&quot;,&quot;eladó&quot;,&quot;samsung&quot;,&quot;s5620&quot;,&quot;monte&quot;,&quot;airoh&quot;,&quot;bukósisak&quot;,&quot;beépített&quot;,&quot;napszemüveggel&quot;,&quot;kondigép&quot;,&quot;sok&quot;,&quot;funkciós&quot;,&quot;antik&quot;,&quot;képkeret&quot;,&quot;eladó&quot;,&quot;disney&quot;,&quot;mintás&quot;,&quot;nyálazó&quot;,&quot;új&quot;,&quot;delongy&quot;,&quot;autómata&quot;,&quot;kávéfőző&quot;,&quot;olcsón&quot;,&quot;codegen&quot;,&quot;grey&quot;,&quot;vagyonőröket&quot;,&quot;keresünk&quot;,&quot;haflingi&quot;,&quot;herélt&quot;,&quot;eladó&quot;,&quot;baba&quot;,&quot;játékok&quot;,&quot;zanussi&quot;,&quot;lehel&quot;,&quot;hütőláda&quot;,&quot;eladó&quot;,&quot;panasonic&quot;,&quot;tv&quot;,&quot;hz&quot;,&quot;renault&quot;,&quot;clio&quot;,&quot;rn&quot;,&quot;lispeszentadorjánban&quot;,&quot;1338m2&quot;,&quot;telek&quot;,&quot;eladó&quot;,&quot;michelin&quot;,&quot;alpin&quot;,&quot;téligumi&quot;,&quot;garnitúra&quot;,&quot;r15&quot;,&quot;sony&quot;,&quot;kdl&quot;,&quot;48w585b&quot;,&quot;led&quot;,&quot;tv&quot;,&quot;electrolux&quot;,&quot;no&quot;,&quot;frost&quot;,&quot;os&quot;,&quot;a&quot;,&quot;fagyasztószekrény&quot;,&quot;alig&quot;,&quot;használt&quot;,&quot;babakocsi&quot;,&quot;madrid&quot;,&quot;személyes&quot;,&quot;ágyfunkciós&quot;,&quot;sarokgarnitúra&quot;,&quot;madrid&quot;,&quot;személyes&quot;,&quot;ágyfunkciós&quot;,&quot;sarokgarnitúra&quot;,&quot;eladó&quot;,&quot;nordica&quot;,&quot;sícipő&quot;,&quot;pierre&quot;,&quot;cardin&quot;,&quot;etetőszék&quot;,&quot;eladó&quot;,&quot;gyönyörű&quot;,&quot;türkinit&quot;,&quot;fülbevaló&quot;,&quot;egyedi&quot;,&quot;kézzel&quot;,&quot;készít&quot;,&quot;audi&quot;,&quot;gyári&quot;,&quot;alufelnigarnitúra&quot;,&quot;szép&quot;,&quot;állapotban&quot;,&quot;eladó&quot;,&quot;andante&quot;,&quot;novalife&quot;,&quot;ülőgarnitúra&quot;,&quot;fogyatékkal&quot;,&quot;élő&quot;,&quot;értékesítési&quot;,&quot;menedzsert&quot;,&quot;felveszünk&quot;,&quot;puskás&quot;,&quot;emlék&quot;,&quot;érme&quot;,&quot;ezüst&quot;,&quot;chipolino&quot;,&quot;dakota&quot;,&quot;használt&quot;,&quot;babakocsi&quot;,&quot;baba&quot;,&quot;overál&quot;,&quot;polár&quot;,&quot;béléssel&quot;,&quot;hónapos&quot;,&quot;korig&quot;,&quot;fujitsusiemens&quot;,&quot;cy23&quot;,&quot;laptop&quot;,&quot;miniparfüm&quot;,&quot;gyűjteményből&quot;,&quot;naf&quot;,&quot;naf&quot;,&quot;fossil&quot;,&quot;me1025&quot;,&quot;eredeti&quot;,&quot;karóra&quot;,&quot;áron&quot;,&quot;alul&quot;,&quot;eladó&quot;}; 

// This is an random element i&apos;m going to extract from the array 
Random rand = new Random();
int min = 50;
int max = 52;

int contentCount = rand.nextInt(max - min) + min;
int titleCount = rand.nextInt(2) + 8;

// This is just for debugging purpose, initialization of test plan variable 
//vars.put(&quot;randomElement&quot;, next.toString()); 

//vars.put(&quot;randomword&quot;, args[randomElement] );

int next;

String text = args[rand.nextInt(args.length)];
for(int i=0; i&lt;titleCount; i++) {
   next = rand.nextInt(args.length);
   text = text + &quot; &quot; + args[next];
}
vars.put(&quot;randomTitle&quot;, text );

text = args[rand.nextInt(args.length)];
for(int i=0; i&lt;contentCount; i++) {
   next = rand.nextInt(args.length);
   text = text + &quot; &quot; + args[next];
}
vars.put(&quot;randomContent&quot;, text );</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags/${tagId}?withDetails=false</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get With Details" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags/${tagId}?withDetails=true</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Get List" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags/</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Update" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;example tag 1&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
        <stringProp name="HTTPSampler.method">PUT</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Delete" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">tags/${tagId}</stringProp>
        <stringProp name="HTTPSampler.method">DELETE</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status Get" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">status</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Sample" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot; : &quot;${sampleId}&quot;,&#xd;
    &quot;Percent&quot; : &quot;1&quot;,&#xd;
    &quot;Size&quot; : &quot;0&quot;,&#xd;
    &quot;TagIdList&quot; : [],&#xd;
    &quot;FieldList&quot;: [&quot;id&quot;, &quot;title&quot;, &quot;desc&quot;]&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents/sample</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Sample Id Generator" enabled="true">
          <stringProp name="variableName">sampleId</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">100000000000</stringProp>
          <stringProp name="randomSeed"></stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Filter" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Filter&quot; : {&#xd;
        &quot;TagIdList&quot; : null,&#xd;
        &quot;Query&quot; : &quot;title:*a*&quot;&#xd;
    },&#xd;
    &quot;Order&quot;: {&#xd;
        &quot;OrderDirection&quot; : &quot;Asc&quot;,&#xd;
        &quot;OrderByField&quot; : &quot;id&quot;&#xd;
    },&#xd;
    &quot;Pagination&quot; : {&#xd;
        &quot;Limit&quot;: 100&#xd;
    },&#xd;
    &quot;FieldList&quot;: [&quot;id&quot;, &quot;title&quot;, &quot;desc&quot;]&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents/filter</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Processes Get Active" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">processes</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Processes Get All" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">processes?allStatus=true</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Create" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Name&quot;: &quot;Example Classifier Service&quot;,&#xd;
    &quot;Description&quot;: &quot;This is an example service description&quot;,&#xd;
    &quot;Type&quot; : &quot;Classifier&quot;,&#xd;
    &quot;Alias&quot; : &quot;classifier-service&quot;&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Prepare" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;DataSetName&quot; : &quot;${dataset-name}-${classifier-service-alias-id}&quot;,&#xd;
    &quot;NGramList&quot;: [1,2,3],&#xd;
    &quot;TagIdList&quot;: [null],&#xd;
    &quot;CompressLevel&quot;: 1,&#xd;
    &quot;CompressSettings&quot;: null&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/classifier/classifier-service-${classifier-service-alias-id}/prepare</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Activate" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;NGramList&quot;: [1,2,3],&#xd;
    &quot;EmphasizedTagIdList&quot;: null,&#xd;
    &quot;TagIdList&quot;: null&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/classifier/classifier-service-${classifier-service-alias-id}/activate</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Recommend" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;Text&quot;: &quot;Lorem Ipsum Dolorem&quot;,&#xd;
    &quot;Count&quot;: &quot;3&quot;,&#xd;
    &quot;UseEmphasizing&quot;: false,&#xd;
    &quot;NeedTagInResult&quot;: true&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/classifier/classifier-service-${classifier-service-alias-id}/recommend</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Deactivate" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/classifier/classifier-service-${classifier-service-alias-id}/deactivate</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Classifier Get" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/${serviceId}</stringProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Services Remove" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">services/${serviceId}</stringProp>
        <stringProp name="HTTPSampler.method">DELETE</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree/>
      <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="JSON Path Assertion" enabled="true">
        <stringProp name="JSON_PATH">$.</stringProp>
        <stringProp name="EXPECTED_VALUE"></stringProp>
        <boolProp name="JSONVALIDATION">false</boolProp>
        <boolProp name="EXPECT_NULL">false</boolProp>
        <boolProp name="INVERT">false</boolProp>
        <boolProp name="ISREGEX">true</boolProp>
      </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 200" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="49586">200</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="49587">201</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 404" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="51512">404</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">true</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 406" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="51514">406</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">true</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 202" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="49588">202</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">8</intProp>
      </ResponseAssertion>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters">5 10</stringProp>
        <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
        <stringProp name="script"></stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Tags Add" enabled="true">
        <boolProp name="LoopController.continue_forever">true</boolProp>
        <stringProp name="LoopController.loops">${tagsCount}</stringProp>
      </LoopController>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">tagId</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
          <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tag Add" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;Id&quot;: &quot;${tagId}&quot;,&#xd;
    &quot;Name&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;ParentId&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
          <stringProp name="HTTPSampler.path">tags</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">5 10</stringProp>
            <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document Add" enabled="true">
        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;${documentId}&quot;,&#xd;
    &quot;title&quot;: &quot;${randomText_0}&quot;,&#xd;
    &quot;desc&quot;: &quot;${randomText_1}&quot;,&#xd;
    &quot;tag&quot;: [${__V(${__Random(0,${tagsCount})})}]&#xd;
}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
        <stringProp name="HTTPSampler.path">documents</stringProp>
        <stringProp name="HTTPSampler.method">POST</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        <boolProp name="HTTPSampler.monitor">false</boolProp>
        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
      </HTTPSamplerProxy>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TextGenerator" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters">2 10 50 100 </stringProp>
          <stringProp name="filename">${jmxDir}/textGenerator.bsh</stringProp>
          <stringProp name="script"></stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status Code 201" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49587">201</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
